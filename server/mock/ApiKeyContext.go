// Code generated by MockGen. DO NOT EDIT.
// Source: ../ApiKeyContext.go

// Package mock_IrisAPIs is a generated GoMock package.
package mock_IrisAPIs

import (
	IrisAPIs "IrisAPIs"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
	time "time"
)

// MockApiKeyService is a mock of ApiKeyService interface
type MockApiKeyService struct {
	ctrl     *gomock.Controller
	recorder *MockApiKeyServiceMockRecorder
}

// MockApiKeyServiceMockRecorder is the mock recorder for MockApiKeyService
type MockApiKeyServiceMockRecorder struct {
	mock *MockApiKeyService
}

// NewMockApiKeyService creates a new mock instance
func NewMockApiKeyService(ctrl *gomock.Controller) *MockApiKeyService {
	mock := &MockApiKeyService{ctrl: ctrl}
	mock.recorder = &MockApiKeyServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockApiKeyService) EXPECT() *MockApiKeyServiceMockRecorder {
	return m.recorder
}

// IssueApiKey mocks base method
func (m *MockApiKeyService) IssueApiKey(application string, useInHeader, useInQuery bool, issuer string, privileged bool) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IssueApiKey", application, useInHeader, useInQuery, issuer, privileged)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IssueApiKey indicates an expected call of IssueApiKey
func (mr *MockApiKeyServiceMockRecorder) IssueApiKey(application, useInHeader, useInQuery, issuer, privileged interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IssueApiKey", reflect.TypeOf((*MockApiKeyService)(nil).IssueApiKey), application, useInHeader, useInQuery, issuer, privileged)
}

// ValidateApiKey mocks base method
func (m *MockApiKeyService) ValidateApiKey(key string, embeddedIn IrisAPIs.ApiKeyLocation) IrisAPIs.ApiKeyPrivilegeLevel {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateApiKey", key, embeddedIn)
	ret0, _ := ret[0].(IrisAPIs.ApiKeyPrivilegeLevel)
	return ret0
}

// ValidateApiKey indicates an expected call of ValidateApiKey
func (mr *MockApiKeyServiceMockRecorder) ValidateApiKey(key, embeddedIn interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateApiKey", reflect.TypeOf((*MockApiKeyService)(nil).ValidateApiKey), key, embeddedIn)
}

// RecordActivity mocks base method
func (m *MockApiKeyService) RecordActivity(path, method, key string, location IrisAPIs.ApiKeyLocation, ip string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RecordActivity", path, method, key, location, ip)
}

// RecordActivity indicates an expected call of RecordActivity
func (mr *MockApiKeyServiceMockRecorder) RecordActivity(path, method, key, location, ip interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecordActivity", reflect.TypeOf((*MockApiKeyService)(nil).RecordActivity), path, method, key, location, ip)
}

// GetAllKeys mocks base method
func (m *MockApiKeyService) GetAllKeys() ([]*IrisAPIs.ApiKeyDataModel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllKeys")
	ret0, _ := ret[0].([]*IrisAPIs.ApiKeyDataModel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllKeys indicates an expected call of GetAllKeys
func (mr *MockApiKeyServiceMockRecorder) GetAllKeys() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllKeys", reflect.TypeOf((*MockApiKeyService)(nil).GetAllKeys))
}

// GetKeyModelById mocks base method
func (m *MockApiKeyService) GetKeyModelById(id int) (*IrisAPIs.ApiKeyDataModel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetKeyModelById", id)
	ret0, _ := ret[0].(*IrisAPIs.ApiKeyDataModel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetKeyModelById indicates an expected call of GetKeyModelById
func (mr *MockApiKeyServiceMockRecorder) GetKeyModelById(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetKeyModelById", reflect.TypeOf((*MockApiKeyService)(nil).GetKeyModelById), id)
}

// SetExpire mocks base method
func (m *MockApiKeyService) SetExpire(keyId int, expire bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetExpire", keyId, expire)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetExpire indicates an expected call of SetExpire
func (mr *MockApiKeyServiceMockRecorder) SetExpire(keyId, expire interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetExpire", reflect.TypeOf((*MockApiKeyService)(nil).SetExpire), keyId, expire)
}

// GetKeyUsageById mocks base method
func (m *MockApiKeyService) GetKeyUsageById(id int, from, to *time.Time) ([]*IrisAPIs.ApiKeyAccess, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetKeyUsageById", id, from, to)
	ret0, _ := ret[0].([]*IrisAPIs.ApiKeyAccess)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetKeyUsageById indicates an expected call of GetKeyUsageById
func (mr *MockApiKeyServiceMockRecorder) GetKeyUsageById(id, from, to interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetKeyUsageById", reflect.TypeOf((*MockApiKeyService)(nil).GetKeyUsageById), id, from, to)
}

// GetKeyUsageByPath mocks base method
func (m *MockApiKeyService) GetKeyUsageByPath(path string, exactMatch bool, from, to *time.Time) ([]*IrisAPIs.ApiKeyAccess, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetKeyUsageByPath", path, exactMatch, from, to)
	ret0, _ := ret[0].([]*IrisAPIs.ApiKeyAccess)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetKeyUsageByPath indicates an expected call of GetKeyUsageByPath
func (mr *MockApiKeyServiceMockRecorder) GetKeyUsageByPath(path, exactMatch, from, to interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetKeyUsageByPath", reflect.TypeOf((*MockApiKeyService)(nil).GetKeyUsageByPath), path, exactMatch, from, to)
}

// MockApiKeyCache is a mock of ApiKeyCache interface
type MockApiKeyCache struct {
	ctrl     *gomock.Controller
	recorder *MockApiKeyCacheMockRecorder
}

// MockApiKeyCacheMockRecorder is the mock recorder for MockApiKeyCache
type MockApiKeyCacheMockRecorder struct {
	mock *MockApiKeyCache
}

// NewMockApiKeyCache creates a new mock instance
func NewMockApiKeyCache(ctrl *gomock.Controller) *MockApiKeyCache {
	mock := &MockApiKeyCache{ctrl: ctrl}
	mock.recorder = &MockApiKeyCacheMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockApiKeyCache) EXPECT() *MockApiKeyCacheMockRecorder {
	return m.recorder
}

// GetData mocks base method
func (m *MockApiKeyCache) GetData(key string) *IrisAPIs.ApiKeyDataModel {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetData", key)
	ret0, _ := ret[0].(*IrisAPIs.ApiKeyDataModel)
	return ret0
}

// GetData indicates an expected call of GetData
func (mr *MockApiKeyCacheMockRecorder) GetData(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetData", reflect.TypeOf((*MockApiKeyCache)(nil).GetData), key)
}

// WriteData mocks base method
func (m *MockApiKeyCache) WriteData(key string, data *IrisAPIs.ApiKeyDataModel) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "WriteData", key, data)
}

// WriteData indicates an expected call of WriteData
func (mr *MockApiKeyCacheMockRecorder) WriteData(key, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteData", reflect.TypeOf((*MockApiKeyCache)(nil).WriteData), key, data)
}

// Invalidate mocks base method
func (m *MockApiKeyCache) Invalidate(key string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Invalidate", key)
}

// Invalidate indicates an expected call of Invalidate
func (mr *MockApiKeyCacheMockRecorder) Invalidate(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Invalidate", reflect.TypeOf((*MockApiKeyCache)(nil).Invalidate), key)
}
