// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package generated

import (
	"IrisAPIs/server/graph/model"
	"bytes"
	"context"
	"errors"
	"fmt"
	"strconv"
	"sync"

	"github.com/99designs/gqlgen/graphql"
	"github.com/99designs/gqlgen/graphql/introspection"
	gqlparser "github.com/vektah/gqlparser/v2"
	"github.com/vektah/gqlparser/v2/ast"
)

// region    ************************** generated!.gotpl **************************

// NewExecutableSchema creates an ExecutableSchema from the ResolverRoot interface.
func NewExecutableSchema(cfg Config) graphql.ExecutableSchema {
	return &executableSchema{
		resolvers:  cfg.Resolvers,
		directives: cfg.Directives,
		complexity: cfg.Complexity,
	}
}

type Config struct {
	Resolvers  ResolverRoot
	Directives DirectiveRoot
	Complexity ComplexityRoot
}

type ResolverRoot interface {
	Mutation() MutationResolver
	Query() QueryResolver
}

type DirectiveRoot struct {
}

type ComplexityRoot struct {
	MainAccessRecord struct {
		IP   func(childComplexity int) int
		Path func(childComplexity int) int
		Time func(childComplexity int) int
	}

	MainApiKeyBrief struct {
		ID         func(childComplexity int) int
		Key        func(childComplexity int) int
		Privileged func(childComplexity int) int
	}

	MainApiKeyDetail struct {
		Application func(childComplexity int) int
		ID          func(childComplexity int) int
		IssueBy     func(childComplexity int) int
		Key         func(childComplexity int) int
		Privileged  func(childComplexity int) int
	}

	MainApiKeyUsage struct {
		Access func(childComplexity int) int
		ID     func(childComplexity int) int
	}

	MainChatbotReactResponse struct {
		Error           func(childComplexity int) int
		InvalidKeywords func(childComplexity int) int
		Keywords        func(childComplexity int) int
		Message         func(childComplexity int) int
		Next            func(childComplexity int) int
		Prompt          func(childComplexity int) int
	}

	MainChatbotResetUserResponse struct {
		Message func(childComplexity int) int
		User    func(childComplexity int) int
	}

	MainCurrencyConvert struct {
		Amount func(childComplexity int) int
		From   func(childComplexity int) int
		Result func(childComplexity int) int
		To     func(childComplexity int) int
	}

	MainGenericResultResponse struct {
		Result func(childComplexity int) int
	}

	MainGetRecentPBSDataResponse struct {
		Events func(childComplexity int) int
		ID     func(childComplexity int) int
	}

	MainGetServiceStatusByIdResponse struct {
		ID      func(childComplexity int) int
		Message func(childComplexity int) int
		Name    func(childComplexity int) int
		Status  func(childComplexity int) int
		Type    func(childComplexity int) int
	}

	MainIpNationCountriesBulkResponse struct {
		IPAddrResult func(childComplexity int) int
	}

	MainIpNationMyIPResponse struct {
		Country       func(childComplexity int) int
		CountrySymbol func(childComplexity int) int
		IPAddr        func(childComplexity int) int
		Lat           func(childComplexity int) int
		Lon           func(childComplexity int) int
	}

	MainIssueApiKeyResponse struct {
		Key func(childComplexity int) int
	}

	MainPingResponse struct {
		BuildTimestamp func(childComplexity int) int
		Hostname       func(childComplexity int) int
		ImageTag       func(childComplexity int) int
		JenkinsURL     func(childComplexity int) int
		Message        func(childComplexity int) int
		Time           func(childComplexity int) int
		Timezone       func(childComplexity int) int
	}

	MainSinglePBSEventInfo struct {
		Message func(childComplexity int) int
		Time    func(childComplexity int) int
	}

	MainTransformArticleResponse struct {
		Text func(childComplexity int) int
	}

	Mutation struct {
		MutationViewerAPIKey  func(childComplexity int, apiKey string) int
		MutationViewerAnyAuth func(childComplexity int, apiKeyAuth *model.APIKeyAuthInput) int
		PostArticleProcess    func(childComplexity int, mainTransformArticleRequestInput model.MainTransformArticleRequestInput) int
		PostCurrencyConvert   func(childComplexity int, mainCurrencyConvertInput model.MainCurrencyConvertInput) int
	}

	MutationViewerAnyAuth struct {
		DeleteChatbotUser func(childComplexity int, user string) int
		PostAPIKey        func(childComplexity int, mainIssueAPIKeyPayloadInput model.MainIssueAPIKeyPayloadInput) int
		PostChatbot       func(childComplexity int, mainChatbotConversationInput model.MainChatbotConversationInput) int
		PostIP2nationBulk func(childComplexity int, mainIPNationCountriesBulkInput model.MainIPNationCountriesBulkInput) int
	}

	MutationViewerApiKey struct {
		DeleteChatbotUser func(childComplexity int, user string) int
		PostAPIKey        func(childComplexity int, mainIssueAPIKeyPayloadInput model.MainIssueAPIKeyPayloadInput) int
		PostChatbot       func(childComplexity int, mainChatbotConversationInput model.MainChatbotConversationInput) int
		PostIP2nationBulk func(childComplexity int, mainIPNationCountriesBulkInput model.MainIPNationCountriesBulkInput) int
	}

	Query struct {
		MainGetServiceStatusByIDResponse func(childComplexity int, id string) int
		MainIPNationMyIPResponse         func(childComplexity int) int
		MainPingResponse                 func(childComplexity int) int
		PbsRecent                        func(childComplexity int, format *string, period *string) int
		Service                          func(childComplexity int) int
		ServiceLogs                      func(childComplexity int, id string) int
		ViewerAPIKey                     func(childComplexity int, apiKey string) int
		ViewerAnyAuth                    func(childComplexity int, apiKeyAuth *model.APIKeyAuthInput) int
	}

	ViewerAnyAuth struct {
		APIKey                    func(childComplexity int) int
		Currency                  func(childComplexity int) int
		MainAPIKeyDetail          func(childComplexity int, id int) int
		MainAPIKeyUsage           func(childComplexity int, from *int, id int, to *int) int
		MainGenericResultResponse func(childComplexity int) int
		MainIPNationCountries     func(childComplexity int, ip string) int
	}

	ViewerApiKey struct {
		APIKey                    func(childComplexity int) int
		Currency                  func(childComplexity int) int
		MainAPIKeyDetail          func(childComplexity int, id int) int
		MainAPIKeyUsage           func(childComplexity int, from *int, id int, to *int) int
		MainGenericResultResponse func(childComplexity int) int
		MainIPNationCountries     func(childComplexity int, ip string) int
	}
}

type MutationResolver interface {
	PostArticleProcess(ctx context.Context, mainTransformArticleRequestInput model.MainTransformArticleRequestInput) (*model.MainTransformArticleResponse, error)
	PostCurrencyConvert(ctx context.Context, mainCurrencyConvertInput model.MainCurrencyConvertInput) (*model.MainCurrencyConvert, error)
	MutationViewerAPIKey(ctx context.Context, apiKey string) (*model.MutationViewerAPIKey, error)
	MutationViewerAnyAuth(ctx context.Context, apiKeyAuth *model.APIKeyAuthInput) (*model.MutationViewerAnyAuth, error)
}
type QueryResolver interface {
	MainGetServiceStatusByIDResponse(ctx context.Context, id string) (*model.MainGetServiceStatusByIDResponse, error)
	MainIPNationMyIPResponse(ctx context.Context) (*model.MainIPNationMyIPResponse, error)
	MainPingResponse(ctx context.Context) (*model.MainPingResponse, error)
	PbsRecent(ctx context.Context, format *string, period *string) ([]*model.MainGetRecentPBSDataResponse, error)
	Service(ctx context.Context) ([]*model.MainGetServiceStatusByIDResponse, error)
	ServiceLogs(ctx context.Context, id string) (*string, error)
	ViewerAPIKey(ctx context.Context, apiKey string) (*model.ViewerAPIKey, error)
	ViewerAnyAuth(ctx context.Context, apiKeyAuth *model.APIKeyAuthInput) (*model.ViewerAnyAuth, error)
}

type executableSchema struct {
	resolvers  ResolverRoot
	directives DirectiveRoot
	complexity ComplexityRoot
}

func (e *executableSchema) Schema() *ast.Schema {
	return parsedSchema
}

func (e *executableSchema) Complexity(typeName, field string, childComplexity int, rawArgs map[string]interface{}) (int, bool) {
	ec := executionContext{nil, e}
	_ = ec
	switch typeName + "." + field {

	case "MainAccessRecord.ip":
		if e.complexity.MainAccessRecord.IP == nil {
			break
		}

		return e.complexity.MainAccessRecord.IP(childComplexity), true

	case "MainAccessRecord.path":
		if e.complexity.MainAccessRecord.Path == nil {
			break
		}

		return e.complexity.MainAccessRecord.Path(childComplexity), true

	case "MainAccessRecord.time":
		if e.complexity.MainAccessRecord.Time == nil {
			break
		}

		return e.complexity.MainAccessRecord.Time(childComplexity), true

	case "MainApiKeyBrief.id":
		if e.complexity.MainApiKeyBrief.ID == nil {
			break
		}

		return e.complexity.MainApiKeyBrief.ID(childComplexity), true

	case "MainApiKeyBrief.key":
		if e.complexity.MainApiKeyBrief.Key == nil {
			break
		}

		return e.complexity.MainApiKeyBrief.Key(childComplexity), true

	case "MainApiKeyBrief.privileged":
		if e.complexity.MainApiKeyBrief.Privileged == nil {
			break
		}

		return e.complexity.MainApiKeyBrief.Privileged(childComplexity), true

	case "MainApiKeyDetail.application":
		if e.complexity.MainApiKeyDetail.Application == nil {
			break
		}

		return e.complexity.MainApiKeyDetail.Application(childComplexity), true

	case "MainApiKeyDetail.id":
		if e.complexity.MainApiKeyDetail.ID == nil {
			break
		}

		return e.complexity.MainApiKeyDetail.ID(childComplexity), true

	case "MainApiKeyDetail.issueBy":
		if e.complexity.MainApiKeyDetail.IssueBy == nil {
			break
		}

		return e.complexity.MainApiKeyDetail.IssueBy(childComplexity), true

	case "MainApiKeyDetail.key":
		if e.complexity.MainApiKeyDetail.Key == nil {
			break
		}

		return e.complexity.MainApiKeyDetail.Key(childComplexity), true

	case "MainApiKeyDetail.privileged":
		if e.complexity.MainApiKeyDetail.Privileged == nil {
			break
		}

		return e.complexity.MainApiKeyDetail.Privileged(childComplexity), true

	case "MainApiKeyUsage.access":
		if e.complexity.MainApiKeyUsage.Access == nil {
			break
		}

		return e.complexity.MainApiKeyUsage.Access(childComplexity), true

	case "MainApiKeyUsage.id":
		if e.complexity.MainApiKeyUsage.ID == nil {
			break
		}

		return e.complexity.MainApiKeyUsage.ID(childComplexity), true

	case "MainChatbotReactResponse.error":
		if e.complexity.MainChatbotReactResponse.Error == nil {
			break
		}

		return e.complexity.MainChatbotReactResponse.Error(childComplexity), true

	case "MainChatbotReactResponse.invalidKeywords":
		if e.complexity.MainChatbotReactResponse.InvalidKeywords == nil {
			break
		}

		return e.complexity.MainChatbotReactResponse.InvalidKeywords(childComplexity), true

	case "MainChatbotReactResponse.keywords":
		if e.complexity.MainChatbotReactResponse.Keywords == nil {
			break
		}

		return e.complexity.MainChatbotReactResponse.Keywords(childComplexity), true

	case "MainChatbotReactResponse.message":
		if e.complexity.MainChatbotReactResponse.Message == nil {
			break
		}

		return e.complexity.MainChatbotReactResponse.Message(childComplexity), true

	case "MainChatbotReactResponse.next":
		if e.complexity.MainChatbotReactResponse.Next == nil {
			break
		}

		return e.complexity.MainChatbotReactResponse.Next(childComplexity), true

	case "MainChatbotReactResponse.prompt":
		if e.complexity.MainChatbotReactResponse.Prompt == nil {
			break
		}

		return e.complexity.MainChatbotReactResponse.Prompt(childComplexity), true

	case "MainChatbotResetUserResponse.message":
		if e.complexity.MainChatbotResetUserResponse.Message == nil {
			break
		}

		return e.complexity.MainChatbotResetUserResponse.Message(childComplexity), true

	case "MainChatbotResetUserResponse.user":
		if e.complexity.MainChatbotResetUserResponse.User == nil {
			break
		}

		return e.complexity.MainChatbotResetUserResponse.User(childComplexity), true

	case "MainCurrencyConvert.amount":
		if e.complexity.MainCurrencyConvert.Amount == nil {
			break
		}

		return e.complexity.MainCurrencyConvert.Amount(childComplexity), true

	case "MainCurrencyConvert.from":
		if e.complexity.MainCurrencyConvert.From == nil {
			break
		}

		return e.complexity.MainCurrencyConvert.From(childComplexity), true

	case "MainCurrencyConvert.result":
		if e.complexity.MainCurrencyConvert.Result == nil {
			break
		}

		return e.complexity.MainCurrencyConvert.Result(childComplexity), true

	case "MainCurrencyConvert.to":
		if e.complexity.MainCurrencyConvert.To == nil {
			break
		}

		return e.complexity.MainCurrencyConvert.To(childComplexity), true

	case "MainGenericResultResponse.result":
		if e.complexity.MainGenericResultResponse.Result == nil {
			break
		}

		return e.complexity.MainGenericResultResponse.Result(childComplexity), true

	case "MainGetRecentPBSDataResponse.events":
		if e.complexity.MainGetRecentPBSDataResponse.Events == nil {
			break
		}

		return e.complexity.MainGetRecentPBSDataResponse.Events(childComplexity), true

	case "MainGetRecentPBSDataResponse.id":
		if e.complexity.MainGetRecentPBSDataResponse.ID == nil {
			break
		}

		return e.complexity.MainGetRecentPBSDataResponse.ID(childComplexity), true

	case "MainGetServiceStatusByIdResponse.id":
		if e.complexity.MainGetServiceStatusByIdResponse.ID == nil {
			break
		}

		return e.complexity.MainGetServiceStatusByIdResponse.ID(childComplexity), true

	case "MainGetServiceStatusByIdResponse.message":
		if e.complexity.MainGetServiceStatusByIdResponse.Message == nil {
			break
		}

		return e.complexity.MainGetServiceStatusByIdResponse.Message(childComplexity), true

	case "MainGetServiceStatusByIdResponse.name":
		if e.complexity.MainGetServiceStatusByIdResponse.Name == nil {
			break
		}

		return e.complexity.MainGetServiceStatusByIdResponse.Name(childComplexity), true

	case "MainGetServiceStatusByIdResponse.status":
		if e.complexity.MainGetServiceStatusByIdResponse.Status == nil {
			break
		}

		return e.complexity.MainGetServiceStatusByIdResponse.Status(childComplexity), true

	case "MainGetServiceStatusByIdResponse.type":
		if e.complexity.MainGetServiceStatusByIdResponse.Type == nil {
			break
		}

		return e.complexity.MainGetServiceStatusByIdResponse.Type(childComplexity), true

	case "MainIpNationCountriesBulkResponse.ipAddrResult":
		if e.complexity.MainIpNationCountriesBulkResponse.IPAddrResult == nil {
			break
		}

		return e.complexity.MainIpNationCountriesBulkResponse.IPAddrResult(childComplexity), true

	case "MainIpNationMyIPResponse.country":
		if e.complexity.MainIpNationMyIPResponse.Country == nil {
			break
		}

		return e.complexity.MainIpNationMyIPResponse.Country(childComplexity), true

	case "MainIpNationMyIPResponse.countrySymbol":
		if e.complexity.MainIpNationMyIPResponse.CountrySymbol == nil {
			break
		}

		return e.complexity.MainIpNationMyIPResponse.CountrySymbol(childComplexity), true

	case "MainIpNationMyIPResponse.ipAddr":
		if e.complexity.MainIpNationMyIPResponse.IPAddr == nil {
			break
		}

		return e.complexity.MainIpNationMyIPResponse.IPAddr(childComplexity), true

	case "MainIpNationMyIPResponse.lat":
		if e.complexity.MainIpNationMyIPResponse.Lat == nil {
			break
		}

		return e.complexity.MainIpNationMyIPResponse.Lat(childComplexity), true

	case "MainIpNationMyIPResponse.lon":
		if e.complexity.MainIpNationMyIPResponse.Lon == nil {
			break
		}

		return e.complexity.MainIpNationMyIPResponse.Lon(childComplexity), true

	case "MainIssueApiKeyResponse.key":
		if e.complexity.MainIssueApiKeyResponse.Key == nil {
			break
		}

		return e.complexity.MainIssueApiKeyResponse.Key(childComplexity), true

	case "MainPingResponse.buildTimestamp":
		if e.complexity.MainPingResponse.BuildTimestamp == nil {
			break
		}

		return e.complexity.MainPingResponse.BuildTimestamp(childComplexity), true

	case "MainPingResponse.hostname":
		if e.complexity.MainPingResponse.Hostname == nil {
			break
		}

		return e.complexity.MainPingResponse.Hostname(childComplexity), true

	case "MainPingResponse.imageTag":
		if e.complexity.MainPingResponse.ImageTag == nil {
			break
		}

		return e.complexity.MainPingResponse.ImageTag(childComplexity), true

	case "MainPingResponse.jenkinsUrl":
		if e.complexity.MainPingResponse.JenkinsURL == nil {
			break
		}

		return e.complexity.MainPingResponse.JenkinsURL(childComplexity), true

	case "MainPingResponse.message":
		if e.complexity.MainPingResponse.Message == nil {
			break
		}

		return e.complexity.MainPingResponse.Message(childComplexity), true

	case "MainPingResponse.time":
		if e.complexity.MainPingResponse.Time == nil {
			break
		}

		return e.complexity.MainPingResponse.Time(childComplexity), true

	case "MainPingResponse.timezone":
		if e.complexity.MainPingResponse.Timezone == nil {
			break
		}

		return e.complexity.MainPingResponse.Timezone(childComplexity), true

	case "MainSinglePBSEventInfo.message":
		if e.complexity.MainSinglePBSEventInfo.Message == nil {
			break
		}

		return e.complexity.MainSinglePBSEventInfo.Message(childComplexity), true

	case "MainSinglePBSEventInfo.time":
		if e.complexity.MainSinglePBSEventInfo.Time == nil {
			break
		}

		return e.complexity.MainSinglePBSEventInfo.Time(childComplexity), true

	case "MainTransformArticleResponse.text":
		if e.complexity.MainTransformArticleResponse.Text == nil {
			break
		}

		return e.complexity.MainTransformArticleResponse.Text(childComplexity), true

	case "Mutation.mutationViewerApiKey":
		if e.complexity.Mutation.MutationViewerAPIKey == nil {
			break
		}

		args, err := ec.field_Mutation_mutationViewerApiKey_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.MutationViewerAPIKey(childComplexity, args["apiKey"].(string)), true

	case "Mutation.mutationViewerAnyAuth":
		if e.complexity.Mutation.MutationViewerAnyAuth == nil {
			break
		}

		args, err := ec.field_Mutation_mutationViewerAnyAuth_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.MutationViewerAnyAuth(childComplexity, args["apiKeyAuth"].(*model.APIKeyAuthInput)), true

	case "Mutation.postArticleProcess":
		if e.complexity.Mutation.PostArticleProcess == nil {
			break
		}

		args, err := ec.field_Mutation_postArticleProcess_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.PostArticleProcess(childComplexity, args["mainTransformArticleRequestInput"].(model.MainTransformArticleRequestInput)), true

	case "Mutation.postCurrencyConvert":
		if e.complexity.Mutation.PostCurrencyConvert == nil {
			break
		}

		args, err := ec.field_Mutation_postCurrencyConvert_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.PostCurrencyConvert(childComplexity, args["mainCurrencyConvertInput"].(model.MainCurrencyConvertInput)), true

	case "MutationViewerAnyAuth.deleteChatbotUser":
		if e.complexity.MutationViewerAnyAuth.DeleteChatbotUser == nil {
			break
		}

		args, err := ec.field_MutationViewerAnyAuth_deleteChatbotUser_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.MutationViewerAnyAuth.DeleteChatbotUser(childComplexity, args["user"].(string)), true

	case "MutationViewerAnyAuth.postApiKey":
		if e.complexity.MutationViewerAnyAuth.PostAPIKey == nil {
			break
		}

		args, err := ec.field_MutationViewerAnyAuth_postApiKey_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.MutationViewerAnyAuth.PostAPIKey(childComplexity, args["mainIssueApiKeyPayloadInput"].(model.MainIssueAPIKeyPayloadInput)), true

	case "MutationViewerAnyAuth.postChatbot":
		if e.complexity.MutationViewerAnyAuth.PostChatbot == nil {
			break
		}

		args, err := ec.field_MutationViewerAnyAuth_postChatbot_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.MutationViewerAnyAuth.PostChatbot(childComplexity, args["mainChatbotConversationInput"].(model.MainChatbotConversationInput)), true

	case "MutationViewerAnyAuth.postIp2nationBulk":
		if e.complexity.MutationViewerAnyAuth.PostIP2nationBulk == nil {
			break
		}

		args, err := ec.field_MutationViewerAnyAuth_postIp2nationBulk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.MutationViewerAnyAuth.PostIP2nationBulk(childComplexity, args["mainIpNationCountriesBulkInput"].(model.MainIPNationCountriesBulkInput)), true

	case "MutationViewerApiKey.deleteChatbotUser":
		if e.complexity.MutationViewerApiKey.DeleteChatbotUser == nil {
			break
		}

		args, err := ec.field_MutationViewerApiKey_deleteChatbotUser_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.MutationViewerApiKey.DeleteChatbotUser(childComplexity, args["user"].(string)), true

	case "MutationViewerApiKey.postApiKey":
		if e.complexity.MutationViewerApiKey.PostAPIKey == nil {
			break
		}

		args, err := ec.field_MutationViewerApiKey_postApiKey_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.MutationViewerApiKey.PostAPIKey(childComplexity, args["mainIssueApiKeyPayloadInput"].(model.MainIssueAPIKeyPayloadInput)), true

	case "MutationViewerApiKey.postChatbot":
		if e.complexity.MutationViewerApiKey.PostChatbot == nil {
			break
		}

		args, err := ec.field_MutationViewerApiKey_postChatbot_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.MutationViewerApiKey.PostChatbot(childComplexity, args["mainChatbotConversationInput"].(model.MainChatbotConversationInput)), true

	case "MutationViewerApiKey.postIp2nationBulk":
		if e.complexity.MutationViewerApiKey.PostIP2nationBulk == nil {
			break
		}

		args, err := ec.field_MutationViewerApiKey_postIp2nationBulk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.MutationViewerApiKey.PostIP2nationBulk(childComplexity, args["mainIpNationCountriesBulkInput"].(model.MainIPNationCountriesBulkInput)), true

	case "Query.mainGetServiceStatusByIdResponse":
		if e.complexity.Query.MainGetServiceStatusByIDResponse == nil {
			break
		}

		args, err := ec.field_Query_mainGetServiceStatusByIdResponse_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.MainGetServiceStatusByIDResponse(childComplexity, args["id"].(string)), true

	case "Query.mainIpNationMyIPResponse":
		if e.complexity.Query.MainIPNationMyIPResponse == nil {
			break
		}

		return e.complexity.Query.MainIPNationMyIPResponse(childComplexity), true

	case "Query.mainPingResponse":
		if e.complexity.Query.MainPingResponse == nil {
			break
		}

		return e.complexity.Query.MainPingResponse(childComplexity), true

	case "Query.pbsRecent":
		if e.complexity.Query.PbsRecent == nil {
			break
		}

		args, err := ec.field_Query_pbsRecent_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.PbsRecent(childComplexity, args["format"].(*string), args["period"].(*string)), true

	case "Query.service":
		if e.complexity.Query.Service == nil {
			break
		}

		return e.complexity.Query.Service(childComplexity), true

	case "Query.serviceLogs":
		if e.complexity.Query.ServiceLogs == nil {
			break
		}

		args, err := ec.field_Query_serviceLogs_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.ServiceLogs(childComplexity, args["id"].(string)), true

	case "Query.viewerApiKey":
		if e.complexity.Query.ViewerAPIKey == nil {
			break
		}

		args, err := ec.field_Query_viewerApiKey_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.ViewerAPIKey(childComplexity, args["apiKey"].(string)), true

	case "Query.viewerAnyAuth":
		if e.complexity.Query.ViewerAnyAuth == nil {
			break
		}

		args, err := ec.field_Query_viewerAnyAuth_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.ViewerAnyAuth(childComplexity, args["apiKeyAuth"].(*model.APIKeyAuthInput)), true

	case "ViewerAnyAuth.apiKey":
		if e.complexity.ViewerAnyAuth.APIKey == nil {
			break
		}

		return e.complexity.ViewerAnyAuth.APIKey(childComplexity), true

	case "ViewerAnyAuth.currency":
		if e.complexity.ViewerAnyAuth.Currency == nil {
			break
		}

		return e.complexity.ViewerAnyAuth.Currency(childComplexity), true

	case "ViewerAnyAuth.mainApiKeyDetail":
		if e.complexity.ViewerAnyAuth.MainAPIKeyDetail == nil {
			break
		}

		args, err := ec.field_ViewerAnyAuth_mainApiKeyDetail_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.ViewerAnyAuth.MainAPIKeyDetail(childComplexity, args["id"].(int)), true

	case "ViewerAnyAuth.mainApiKeyUsage":
		if e.complexity.ViewerAnyAuth.MainAPIKeyUsage == nil {
			break
		}

		args, err := ec.field_ViewerAnyAuth_mainApiKeyUsage_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.ViewerAnyAuth.MainAPIKeyUsage(childComplexity, args["from"].(*int), args["id"].(int), args["to"].(*int)), true

	case "ViewerAnyAuth.mainGenericResultResponse":
		if e.complexity.ViewerAnyAuth.MainGenericResultResponse == nil {
			break
		}

		return e.complexity.ViewerAnyAuth.MainGenericResultResponse(childComplexity), true

	case "ViewerAnyAuth.mainIpNationCountries":
		if e.complexity.ViewerAnyAuth.MainIPNationCountries == nil {
			break
		}

		args, err := ec.field_ViewerAnyAuth_mainIpNationCountries_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.ViewerAnyAuth.MainIPNationCountries(childComplexity, args["ip"].(string)), true

	case "ViewerApiKey.apiKey":
		if e.complexity.ViewerApiKey.APIKey == nil {
			break
		}

		return e.complexity.ViewerApiKey.APIKey(childComplexity), true

	case "ViewerApiKey.currency":
		if e.complexity.ViewerApiKey.Currency == nil {
			break
		}

		return e.complexity.ViewerApiKey.Currency(childComplexity), true

	case "ViewerApiKey.mainApiKeyDetail":
		if e.complexity.ViewerApiKey.MainAPIKeyDetail == nil {
			break
		}

		args, err := ec.field_ViewerApiKey_mainApiKeyDetail_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.ViewerApiKey.MainAPIKeyDetail(childComplexity, args["id"].(int)), true

	case "ViewerApiKey.mainApiKeyUsage":
		if e.complexity.ViewerApiKey.MainAPIKeyUsage == nil {
			break
		}

		args, err := ec.field_ViewerApiKey_mainApiKeyUsage_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.ViewerApiKey.MainAPIKeyUsage(childComplexity, args["from"].(*int), args["id"].(int), args["to"].(*int)), true

	case "ViewerApiKey.mainGenericResultResponse":
		if e.complexity.ViewerApiKey.MainGenericResultResponse == nil {
			break
		}

		return e.complexity.ViewerApiKey.MainGenericResultResponse(childComplexity), true

	case "ViewerApiKey.mainIpNationCountries":
		if e.complexity.ViewerApiKey.MainIPNationCountries == nil {
			break
		}

		args, err := ec.field_ViewerApiKey_mainIpNationCountries_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.ViewerApiKey.MainIPNationCountries(childComplexity, args["ip"].(string)), true

	}
	return 0, false
}

func (e *executableSchema) Exec(ctx context.Context) graphql.ResponseHandler {
	rc := graphql.GetOperationContext(ctx)
	ec := executionContext{rc, e}
	inputUnmarshalMap := graphql.BuildUnmarshalerMap(
		ec.unmarshalInputApiKeyAuthInput,
		ec.unmarshalInputMainChatbotConversationInput,
		ec.unmarshalInputMainCurrencyConvertInput,
		ec.unmarshalInputMainIpNationCountriesBulkInput,
		ec.unmarshalInputMainIssueApiKeyPayloadInput,
		ec.unmarshalInputMainTransformArticleRequestInput,
	)
	first := true

	switch rc.Operation.Operation {
	case ast.Query:
		return func(ctx context.Context) *graphql.Response {
			if !first {
				return nil
			}
			first = false
			ctx = graphql.WithUnmarshalerMap(ctx, inputUnmarshalMap)
			data := ec._Query(ctx, rc.Operation.SelectionSet)
			var buf bytes.Buffer
			data.MarshalGQL(&buf)

			return &graphql.Response{
				Data: buf.Bytes(),
			}
		}
	case ast.Mutation:
		return func(ctx context.Context) *graphql.Response {
			if !first {
				return nil
			}
			first = false
			ctx = graphql.WithUnmarshalerMap(ctx, inputUnmarshalMap)
			data := ec._Mutation(ctx, rc.Operation.SelectionSet)
			var buf bytes.Buffer
			data.MarshalGQL(&buf)

			return &graphql.Response{
				Data: buf.Bytes(),
			}
		}

	default:
		return graphql.OneShot(graphql.ErrorResponse(ctx, "unsupported GraphQL operation"))
	}
}

type executionContext struct {
	*graphql.OperationContext
	*executableSchema
}

func (ec *executionContext) introspectSchema() (*introspection.Schema, error) {
	if ec.DisableIntrospection {
		return nil, errors.New("introspection disabled")
	}
	return introspection.WrapSchema(parsedSchema), nil
}

func (ec *executionContext) introspectType(name string) (*introspection.Type, error) {
	if ec.DisableIntrospection {
		return nil, errors.New("introspection disabled")
	}
	return introspection.WrapTypeFromDef(parsedSchema, parsedSchema.Types[name]), nil
}

var sources = []*ast.Source{
	{Name: "graph/schema.graphql", Input: `type Query {
  """
  Get service status with specified ID
  
  Equivalent to GET /service/{id}
  """
  mainGetServiceStatusByIdResponse(
    """Service ID"""
    id: String!
  ): MainGetServiceStatusByIdResponse

  """
  Detect client IP address and look up information
  
  Equivalent to GET /ip2nation/myip
  """
  mainIpNationMyIPResponse: MainIpNationMyIPResponse

  """
  Ping for Iris health check
  
  Equivalent to GET /ping
  """
  mainPingResponse: MainPingResponse

  """
  Get most PBS data, default value is 3600 seconds
  
  Equivalent to GET /pbs/recent
  """
  pbsRecent(
    """Format, either text or json(default = json)"""
    format: String

    """Period, in seconds(default = 3600)"""
    period: String
  ): [MainGetRecentPBSDataResponse]

  """
  Get all service status upon registered ones
  
  Equivalent to GET /service
  """
  service: [MainGetServiceStatusByIdResponse]

  """
  Get service logs with specified ID
  
  Equivalent to GET /service/{id}/logs
  """
  serviceLogs(
    """Service ID"""
    id: String!
  ): String

  """
  A viewer that wraps all operations authenticated via security scheme 'ApiKeyAuth', which is of type 'apiKey'
  """
  viewerApiKey(apiKey: String!): ViewerApiKey

  """
  A viewer that wraps operations for all available authentication mechanisms
  """
  viewerAnyAuth(apiKeyAuth: ApiKeyAuthInput): ViewerAnyAuth
}

type MainGetServiceStatusByIdResponse {
  id: String
  message: String
  name: String
  status: String
  type: String
}

type MainIpNationMyIPResponse {
  country: String
  countrySymbol: String
  ipAddr: String
  lat: Float
  lon: Float
}

type MainPingResponse {
  buildTimestamp: Int
  hostname: String
  imageTag: String
  jenkinsUrl: String
  message: String
  time: String
  timezone: String
}

type MainGetRecentPBSDataResponse {
  events: [MainSinglePBSEventInfo]
  id: String
}

type MainSinglePBSEventInfo {
  message: String
  time: String
}

"""A viewer for security scheme 'ApiKeyAuth'"""
type ViewerApiKey {
  """
  Get current api keys
  
  Equivalent to GET /apiKey
  """
  apiKey: [MainApiKeyBrief]

  """
  Get most recent raw data fetching from fixer.io
  
  Equivalent to GET /currency
  """
  currency: String

  """
  Get destinated API Key detail
  
  Equivalent to GET /apiKey/{id}
  """
  mainApiKeyDetail(
    """Api Key ID"""
    id: Int!
  ): MainApiKeyDetail

  """
  Get API Usages, can pass timestamp into thee
  
  Equivalent to GET /apiKey/{id}/usage
  """
  mainApiKeyUsage(
    """From(timestamp)"""
    from: Int

    """Api Key ID"""
    id: Int!

    """To(timestamp)"""
    to: Int
  ): MainApiKeyUsage

  """
  Sync server cache with Fixer.io with most recent raw data
  
  Equivalent to GET /currency/sync
  """
  mainGenericResultResponse: MainGenericResultResponse

  """
  Look up in database, find which nation belongs to an IP
  
  Equivalent to GET /ip2nation
  """
  mainIpNationCountries(
    """IP address"""
    ip: String!
  ): JSON
}

type MainApiKeyBrief {
  id: Int
  key: String
  privileged: Boolean
}

type MainApiKeyDetail {
  application: String
  id: Int
  issueBy: String
  key: String
  privileged: Boolean
}

type MainApiKeyUsage {
  access: [MainAccessRecord]
  id: Int
}

type MainAccessRecord {
  ip: String
  path: String
  time: String
}

type MainGenericResultResponse {
  result: Boolean
}

"""
The ` + "`" + `JSON` + "`" + ` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

"""Warning: Not every request will work with this viewer type"""
type ViewerAnyAuth {
  """
  Get current api keys
  
  Equivalent to GET /apiKey
  """
  apiKey: [MainApiKeyBrief]

  """
  Get most recent raw data fetching from fixer.io
  
  Equivalent to GET /currency
  """
  currency: String

  """
  Get destinated API Key detail
  
  Equivalent to GET /apiKey/{id}
  """
  mainApiKeyDetail(
    """Api Key ID"""
    id: Int!
  ): MainApiKeyDetail

  """
  Get API Usages, can pass timestamp into thee
  
  Equivalent to GET /apiKey/{id}/usage
  """
  mainApiKeyUsage(
    """From(timestamp)"""
    from: Int

    """Api Key ID"""
    id: Int!

    """To(timestamp)"""
    to: Int
  ): MainApiKeyUsage

  """
  Sync server cache with Fixer.io with most recent raw data
  
  Equivalent to GET /currency/sync
  """
  mainGenericResultResponse: MainGenericResultResponse

  """
  Look up in database, find which nation belongs to an IP
  
  Equivalent to GET /ip2nation
  """
  mainIpNationCountries(
    """IP address"""
    ip: String!
  ): JSON
}

"""API key credentials for the security protocol 'ApiKeyAuth'"""
input ApiKeyAuthInput {
  apiKey: String
}

type Mutation {
  """
  Transform Article, including split by bytes...etc
  
  Equivalent to POST /article_process
  """
  postArticleProcess(mainTransformArticleRequestInput: MainTransformArticleRequestInput!): MainTransformArticleResponse

  """
  Convert currency from most recent data
  
  Equivalent to POST /currency/convert
  """
  postCurrencyConvert(mainCurrencyConvertInput: MainCurrencyConvertInput!): MainCurrencyConvert

  """
  A viewer that wraps all operations authenticated via security scheme 'ApiKeyAuth', which is of type 'apiKey'
  """
  mutationViewerApiKey(apiKey: String!): MutationViewerApiKey

  """
  A viewer that wraps operations for all available authentication mechanisms
  """
  mutationViewerAnyAuth(apiKeyAuth: ApiKeyAuthInput): MutationViewerAnyAuth
}

type MainTransformArticleResponse {
  text: String
}

input MainTransformArticleRequestInput {
  bytesPerLine: Int
  text: String
}

type MainCurrencyConvert {
  amount: Float
  from: String
  result: Float
  to: String
}

input MainCurrencyConvertInput {
  amount: Float
  from: String
  result: Float
  to: String
}

"""A viewer for security scheme 'ApiKeyAuth'"""
type MutationViewerApiKey {
  """
  Reset user status to initial
  
  Equivalent to DELETE /chatbot/{user}
  """
  deleteChatbotUser(
    """User name to reset"""
    user: String!
  ): MainChatbotResetUserResponse

  """
  Issue an API Key to user, this endpoint requires privileges
  
  Equivalent to POST /apiKey
  """
  postApiKey(mainIssueApiKeyPayloadInput: MainIssueApiKeyPayloadInput!): MainIssueApiKeyResponse

  """
  Main Chatter interface for ChatBot
  
  Equivalent to POST /chatbot
  """
  postChatbot(mainChatbotConversationInput: MainChatbotConversationInput!): MainChatbotReactResponse

  """
  Look up in database, find which nation belongs to an IP
  
  Equivalent to POST /ip2nation/bulk
  """
  postIp2nationBulk(mainIpNationCountriesBulkInput: MainIpNationCountriesBulkInput!): MainIpNationCountriesBulkResponse
}

type MainChatbotResetUserResponse {
  message: String
  user: String
}

type MainIssueApiKeyResponse {
  key: String
}

input MainIssueApiKeyPayloadInput {
  application: String
  useInHeader: Boolean
  useInQueryParam: Boolean
}

type MainChatbotReactResponse {
  error: String
  invalidKeywords: [String]
  keywords: [String]
  message: String
  next: String
  prompt: String
}

input MainChatbotConversationInput {
  input: String
  user: String
}

type MainIpNationCountriesBulkResponse {
  ipAddrResult: JSON
}

input MainIpNationCountriesBulkInput {
  ipAddrList: [String]
}

"""Warning: Not every request will work with this viewer type"""
type MutationViewerAnyAuth {
  """
  Reset user status to initial
  
  Equivalent to DELETE /chatbot/{user}
  """
  deleteChatbotUser(
    """User name to reset"""
    user: String!
  ): MainChatbotResetUserResponse

  """
  Issue an API Key to user, this endpoint requires privileges
  
  Equivalent to POST /apiKey
  """
  postApiKey(mainIssueApiKeyPayloadInput: MainIssueApiKeyPayloadInput!): MainIssueApiKeyResponse

  """
  Main Chatter interface for ChatBot
  
  Equivalent to POST /chatbot
  """
  postChatbot(mainChatbotConversationInput: MainChatbotConversationInput!): MainChatbotReactResponse

  """
  Look up in database, find which nation belongs to an IP
  
  Equivalent to POST /ip2nation/bulk
  """
  postIp2nationBulk(mainIpNationCountriesBulkInput: MainIpNationCountriesBulkInput!): MainIpNationCountriesBulkResponse
}
`, BuiltIn: false},
}
var parsedSchema = gqlparser.MustLoadSchema(sources...)

// endregion ************************** generated!.gotpl **************************

// region    ***************************** args.gotpl *****************************

func (ec *executionContext) field_MutationViewerAnyAuth_deleteChatbotUser_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["user"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("user"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["user"] = arg0
	return args, nil
}

func (ec *executionContext) field_MutationViewerAnyAuth_postApiKey_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.MainIssueAPIKeyPayloadInput
	if tmp, ok := rawArgs["mainIssueApiKeyPayloadInput"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("mainIssueApiKeyPayloadInput"))
		arg0, err = ec.unmarshalNMainIssueApiKeyPayloadInput2IrisAPIsᚋserverᚋgraphᚋmodelᚐMainIssueAPIKeyPayloadInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["mainIssueApiKeyPayloadInput"] = arg0
	return args, nil
}

func (ec *executionContext) field_MutationViewerAnyAuth_postChatbot_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.MainChatbotConversationInput
	if tmp, ok := rawArgs["mainChatbotConversationInput"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("mainChatbotConversationInput"))
		arg0, err = ec.unmarshalNMainChatbotConversationInput2IrisAPIsᚋserverᚋgraphᚋmodelᚐMainChatbotConversationInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["mainChatbotConversationInput"] = arg0
	return args, nil
}

func (ec *executionContext) field_MutationViewerAnyAuth_postIp2nationBulk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.MainIPNationCountriesBulkInput
	if tmp, ok := rawArgs["mainIpNationCountriesBulkInput"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("mainIpNationCountriesBulkInput"))
		arg0, err = ec.unmarshalNMainIpNationCountriesBulkInput2IrisAPIsᚋserverᚋgraphᚋmodelᚐMainIPNationCountriesBulkInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["mainIpNationCountriesBulkInput"] = arg0
	return args, nil
}

func (ec *executionContext) field_MutationViewerApiKey_deleteChatbotUser_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["user"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("user"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["user"] = arg0
	return args, nil
}

func (ec *executionContext) field_MutationViewerApiKey_postApiKey_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.MainIssueAPIKeyPayloadInput
	if tmp, ok := rawArgs["mainIssueApiKeyPayloadInput"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("mainIssueApiKeyPayloadInput"))
		arg0, err = ec.unmarshalNMainIssueApiKeyPayloadInput2IrisAPIsᚋserverᚋgraphᚋmodelᚐMainIssueAPIKeyPayloadInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["mainIssueApiKeyPayloadInput"] = arg0
	return args, nil
}

func (ec *executionContext) field_MutationViewerApiKey_postChatbot_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.MainChatbotConversationInput
	if tmp, ok := rawArgs["mainChatbotConversationInput"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("mainChatbotConversationInput"))
		arg0, err = ec.unmarshalNMainChatbotConversationInput2IrisAPIsᚋserverᚋgraphᚋmodelᚐMainChatbotConversationInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["mainChatbotConversationInput"] = arg0
	return args, nil
}

func (ec *executionContext) field_MutationViewerApiKey_postIp2nationBulk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.MainIPNationCountriesBulkInput
	if tmp, ok := rawArgs["mainIpNationCountriesBulkInput"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("mainIpNationCountriesBulkInput"))
		arg0, err = ec.unmarshalNMainIpNationCountriesBulkInput2IrisAPIsᚋserverᚋgraphᚋmodelᚐMainIPNationCountriesBulkInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["mainIpNationCountriesBulkInput"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_mutationViewerAnyAuth_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.APIKeyAuthInput
	if tmp, ok := rawArgs["apiKeyAuth"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("apiKeyAuth"))
		arg0, err = ec.unmarshalOApiKeyAuthInput2ᚖIrisAPIsᚋserverᚋgraphᚋmodelᚐAPIKeyAuthInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["apiKeyAuth"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_mutationViewerApiKey_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["apiKey"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("apiKey"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["apiKey"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_postArticleProcess_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.MainTransformArticleRequestInput
	if tmp, ok := rawArgs["mainTransformArticleRequestInput"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("mainTransformArticleRequestInput"))
		arg0, err = ec.unmarshalNMainTransformArticleRequestInput2IrisAPIsᚋserverᚋgraphᚋmodelᚐMainTransformArticleRequestInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["mainTransformArticleRequestInput"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_postCurrencyConvert_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.MainCurrencyConvertInput
	if tmp, ok := rawArgs["mainCurrencyConvertInput"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("mainCurrencyConvertInput"))
		arg0, err = ec.unmarshalNMainCurrencyConvertInput2IrisAPIsᚋserverᚋgraphᚋmodelᚐMainCurrencyConvertInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["mainCurrencyConvertInput"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query___type_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["name"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["name"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_mainGetServiceStatusByIdResponse_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_pbsRecent_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *string
	if tmp, ok := rawArgs["format"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("format"))
		arg0, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["format"] = arg0
	var arg1 *string
	if tmp, ok := rawArgs["period"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("period"))
		arg1, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["period"] = arg1
	return args, nil
}

func (ec *executionContext) field_Query_serviceLogs_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_viewerAnyAuth_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.APIKeyAuthInput
	if tmp, ok := rawArgs["apiKeyAuth"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("apiKeyAuth"))
		arg0, err = ec.unmarshalOApiKeyAuthInput2ᚖIrisAPIsᚋserverᚋgraphᚋmodelᚐAPIKeyAuthInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["apiKeyAuth"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_viewerApiKey_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["apiKey"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("apiKey"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["apiKey"] = arg0
	return args, nil
}

func (ec *executionContext) field_ViewerAnyAuth_mainApiKeyDetail_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 int
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNInt2int(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_ViewerAnyAuth_mainApiKeyUsage_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *int
	if tmp, ok := rawArgs["from"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("from"))
		arg0, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["from"] = arg0
	var arg1 int
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg1, err = ec.unmarshalNInt2int(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["to"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("to"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["to"] = arg2
	return args, nil
}

func (ec *executionContext) field_ViewerAnyAuth_mainIpNationCountries_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["ip"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ip"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["ip"] = arg0
	return args, nil
}

func (ec *executionContext) field_ViewerApiKey_mainApiKeyDetail_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 int
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNInt2int(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_ViewerApiKey_mainApiKeyUsage_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *int
	if tmp, ok := rawArgs["from"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("from"))
		arg0, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["from"] = arg0
	var arg1 int
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg1, err = ec.unmarshalNInt2int(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["to"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("to"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["to"] = arg2
	return args, nil
}

func (ec *executionContext) field_ViewerApiKey_mainIpNationCountries_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["ip"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ip"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["ip"] = arg0
	return args, nil
}

func (ec *executionContext) field___Type_enumValues_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 bool
	if tmp, ok := rawArgs["includeDeprecated"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("includeDeprecated"))
		arg0, err = ec.unmarshalOBoolean2bool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["includeDeprecated"] = arg0
	return args, nil
}

func (ec *executionContext) field___Type_fields_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 bool
	if tmp, ok := rawArgs["includeDeprecated"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("includeDeprecated"))
		arg0, err = ec.unmarshalOBoolean2bool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["includeDeprecated"] = arg0
	return args, nil
}

// endregion ***************************** args.gotpl *****************************

// region    ************************** directives.gotpl **************************

// endregion ************************** directives.gotpl **************************

// region    **************************** field.gotpl *****************************

func (ec *executionContext) _MainAccessRecord_ip(ctx context.Context, field graphql.CollectedField, obj *model.MainAccessRecord) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MainAccessRecord_ip(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IP, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MainAccessRecord_ip(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MainAccessRecord",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MainAccessRecord_path(ctx context.Context, field graphql.CollectedField, obj *model.MainAccessRecord) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MainAccessRecord_path(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Path, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MainAccessRecord_path(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MainAccessRecord",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MainAccessRecord_time(ctx context.Context, field graphql.CollectedField, obj *model.MainAccessRecord) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MainAccessRecord_time(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Time, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MainAccessRecord_time(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MainAccessRecord",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MainApiKeyBrief_id(ctx context.Context, field graphql.CollectedField, obj *model.MainAPIKeyBrief) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MainApiKeyBrief_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MainApiKeyBrief_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MainApiKeyBrief",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MainApiKeyBrief_key(ctx context.Context, field graphql.CollectedField, obj *model.MainAPIKeyBrief) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MainApiKeyBrief_key(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Key, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MainApiKeyBrief_key(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MainApiKeyBrief",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MainApiKeyBrief_privileged(ctx context.Context, field graphql.CollectedField, obj *model.MainAPIKeyBrief) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MainApiKeyBrief_privileged(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Privileged, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MainApiKeyBrief_privileged(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MainApiKeyBrief",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MainApiKeyDetail_application(ctx context.Context, field graphql.CollectedField, obj *model.MainAPIKeyDetail) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MainApiKeyDetail_application(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Application, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MainApiKeyDetail_application(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MainApiKeyDetail",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MainApiKeyDetail_id(ctx context.Context, field graphql.CollectedField, obj *model.MainAPIKeyDetail) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MainApiKeyDetail_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MainApiKeyDetail_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MainApiKeyDetail",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MainApiKeyDetail_issueBy(ctx context.Context, field graphql.CollectedField, obj *model.MainAPIKeyDetail) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MainApiKeyDetail_issueBy(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IssueBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MainApiKeyDetail_issueBy(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MainApiKeyDetail",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MainApiKeyDetail_key(ctx context.Context, field graphql.CollectedField, obj *model.MainAPIKeyDetail) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MainApiKeyDetail_key(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Key, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MainApiKeyDetail_key(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MainApiKeyDetail",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MainApiKeyDetail_privileged(ctx context.Context, field graphql.CollectedField, obj *model.MainAPIKeyDetail) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MainApiKeyDetail_privileged(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Privileged, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MainApiKeyDetail_privileged(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MainApiKeyDetail",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MainApiKeyUsage_access(ctx context.Context, field graphql.CollectedField, obj *model.MainAPIKeyUsage) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MainApiKeyUsage_access(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Access, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.MainAccessRecord)
	fc.Result = res
	return ec.marshalOMainAccessRecord2ᚕᚖIrisAPIsᚋserverᚋgraphᚋmodelᚐMainAccessRecord(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MainApiKeyUsage_access(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MainApiKeyUsage",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "ip":
				return ec.fieldContext_MainAccessRecord_ip(ctx, field)
			case "path":
				return ec.fieldContext_MainAccessRecord_path(ctx, field)
			case "time":
				return ec.fieldContext_MainAccessRecord_time(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type MainAccessRecord", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _MainApiKeyUsage_id(ctx context.Context, field graphql.CollectedField, obj *model.MainAPIKeyUsage) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MainApiKeyUsage_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MainApiKeyUsage_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MainApiKeyUsage",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MainChatbotReactResponse_error(ctx context.Context, field graphql.CollectedField, obj *model.MainChatbotReactResponse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MainChatbotReactResponse_error(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Error, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MainChatbotReactResponse_error(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MainChatbotReactResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MainChatbotReactResponse_invalidKeywords(ctx context.Context, field graphql.CollectedField, obj *model.MainChatbotReactResponse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MainChatbotReactResponse_invalidKeywords(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InvalidKeywords, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*string)
	fc.Result = res
	return ec.marshalOString2ᚕᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MainChatbotReactResponse_invalidKeywords(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MainChatbotReactResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MainChatbotReactResponse_keywords(ctx context.Context, field graphql.CollectedField, obj *model.MainChatbotReactResponse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MainChatbotReactResponse_keywords(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Keywords, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*string)
	fc.Result = res
	return ec.marshalOString2ᚕᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MainChatbotReactResponse_keywords(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MainChatbotReactResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MainChatbotReactResponse_message(ctx context.Context, field graphql.CollectedField, obj *model.MainChatbotReactResponse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MainChatbotReactResponse_message(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Message, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MainChatbotReactResponse_message(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MainChatbotReactResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MainChatbotReactResponse_next(ctx context.Context, field graphql.CollectedField, obj *model.MainChatbotReactResponse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MainChatbotReactResponse_next(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Next, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MainChatbotReactResponse_next(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MainChatbotReactResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MainChatbotReactResponse_prompt(ctx context.Context, field graphql.CollectedField, obj *model.MainChatbotReactResponse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MainChatbotReactResponse_prompt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Prompt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MainChatbotReactResponse_prompt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MainChatbotReactResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MainChatbotResetUserResponse_message(ctx context.Context, field graphql.CollectedField, obj *model.MainChatbotResetUserResponse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MainChatbotResetUserResponse_message(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Message, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MainChatbotResetUserResponse_message(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MainChatbotResetUserResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MainChatbotResetUserResponse_user(ctx context.Context, field graphql.CollectedField, obj *model.MainChatbotResetUserResponse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MainChatbotResetUserResponse_user(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.User, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MainChatbotResetUserResponse_user(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MainChatbotResetUserResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MainCurrencyConvert_amount(ctx context.Context, field graphql.CollectedField, obj *model.MainCurrencyConvert) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MainCurrencyConvert_amount(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Amount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MainCurrencyConvert_amount(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MainCurrencyConvert",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MainCurrencyConvert_from(ctx context.Context, field graphql.CollectedField, obj *model.MainCurrencyConvert) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MainCurrencyConvert_from(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.From, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MainCurrencyConvert_from(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MainCurrencyConvert",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MainCurrencyConvert_result(ctx context.Context, field graphql.CollectedField, obj *model.MainCurrencyConvert) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MainCurrencyConvert_result(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Result, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MainCurrencyConvert_result(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MainCurrencyConvert",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MainCurrencyConvert_to(ctx context.Context, field graphql.CollectedField, obj *model.MainCurrencyConvert) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MainCurrencyConvert_to(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.To, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MainCurrencyConvert_to(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MainCurrencyConvert",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MainGenericResultResponse_result(ctx context.Context, field graphql.CollectedField, obj *model.MainGenericResultResponse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MainGenericResultResponse_result(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Result, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MainGenericResultResponse_result(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MainGenericResultResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MainGetRecentPBSDataResponse_events(ctx context.Context, field graphql.CollectedField, obj *model.MainGetRecentPBSDataResponse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MainGetRecentPBSDataResponse_events(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Events, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.MainSinglePBSEventInfo)
	fc.Result = res
	return ec.marshalOMainSinglePBSEventInfo2ᚕᚖIrisAPIsᚋserverᚋgraphᚋmodelᚐMainSinglePBSEventInfo(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MainGetRecentPBSDataResponse_events(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MainGetRecentPBSDataResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "message":
				return ec.fieldContext_MainSinglePBSEventInfo_message(ctx, field)
			case "time":
				return ec.fieldContext_MainSinglePBSEventInfo_time(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type MainSinglePBSEventInfo", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _MainGetRecentPBSDataResponse_id(ctx context.Context, field graphql.CollectedField, obj *model.MainGetRecentPBSDataResponse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MainGetRecentPBSDataResponse_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MainGetRecentPBSDataResponse_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MainGetRecentPBSDataResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MainGetServiceStatusByIdResponse_id(ctx context.Context, field graphql.CollectedField, obj *model.MainGetServiceStatusByIDResponse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MainGetServiceStatusByIdResponse_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MainGetServiceStatusByIdResponse_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MainGetServiceStatusByIdResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MainGetServiceStatusByIdResponse_message(ctx context.Context, field graphql.CollectedField, obj *model.MainGetServiceStatusByIDResponse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MainGetServiceStatusByIdResponse_message(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Message, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MainGetServiceStatusByIdResponse_message(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MainGetServiceStatusByIdResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MainGetServiceStatusByIdResponse_name(ctx context.Context, field graphql.CollectedField, obj *model.MainGetServiceStatusByIDResponse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MainGetServiceStatusByIdResponse_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MainGetServiceStatusByIdResponse_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MainGetServiceStatusByIdResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MainGetServiceStatusByIdResponse_status(ctx context.Context, field graphql.CollectedField, obj *model.MainGetServiceStatusByIDResponse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MainGetServiceStatusByIdResponse_status(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Status, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MainGetServiceStatusByIdResponse_status(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MainGetServiceStatusByIdResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MainGetServiceStatusByIdResponse_type(ctx context.Context, field graphql.CollectedField, obj *model.MainGetServiceStatusByIDResponse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MainGetServiceStatusByIdResponse_type(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MainGetServiceStatusByIdResponse_type(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MainGetServiceStatusByIdResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MainIpNationCountriesBulkResponse_ipAddrResult(ctx context.Context, field graphql.CollectedField, obj *model.MainIPNationCountriesBulkResponse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MainIpNationCountriesBulkResponse_ipAddrResult(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IPAddrResult, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOJSON2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MainIpNationCountriesBulkResponse_ipAddrResult(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MainIpNationCountriesBulkResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type JSON does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MainIpNationMyIPResponse_country(ctx context.Context, field graphql.CollectedField, obj *model.MainIPNationMyIPResponse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MainIpNationMyIPResponse_country(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Country, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MainIpNationMyIPResponse_country(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MainIpNationMyIPResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MainIpNationMyIPResponse_countrySymbol(ctx context.Context, field graphql.CollectedField, obj *model.MainIPNationMyIPResponse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MainIpNationMyIPResponse_countrySymbol(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CountrySymbol, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MainIpNationMyIPResponse_countrySymbol(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MainIpNationMyIPResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MainIpNationMyIPResponse_ipAddr(ctx context.Context, field graphql.CollectedField, obj *model.MainIPNationMyIPResponse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MainIpNationMyIPResponse_ipAddr(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IPAddr, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MainIpNationMyIPResponse_ipAddr(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MainIpNationMyIPResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MainIpNationMyIPResponse_lat(ctx context.Context, field graphql.CollectedField, obj *model.MainIPNationMyIPResponse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MainIpNationMyIPResponse_lat(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Lat, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MainIpNationMyIPResponse_lat(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MainIpNationMyIPResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MainIpNationMyIPResponse_lon(ctx context.Context, field graphql.CollectedField, obj *model.MainIPNationMyIPResponse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MainIpNationMyIPResponse_lon(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Lon, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MainIpNationMyIPResponse_lon(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MainIpNationMyIPResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MainIssueApiKeyResponse_key(ctx context.Context, field graphql.CollectedField, obj *model.MainIssueAPIKeyResponse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MainIssueApiKeyResponse_key(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Key, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MainIssueApiKeyResponse_key(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MainIssueApiKeyResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MainPingResponse_buildTimestamp(ctx context.Context, field graphql.CollectedField, obj *model.MainPingResponse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MainPingResponse_buildTimestamp(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BuildTimestamp, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MainPingResponse_buildTimestamp(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MainPingResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MainPingResponse_hostname(ctx context.Context, field graphql.CollectedField, obj *model.MainPingResponse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MainPingResponse_hostname(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Hostname, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MainPingResponse_hostname(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MainPingResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MainPingResponse_imageTag(ctx context.Context, field graphql.CollectedField, obj *model.MainPingResponse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MainPingResponse_imageTag(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ImageTag, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MainPingResponse_imageTag(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MainPingResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MainPingResponse_jenkinsUrl(ctx context.Context, field graphql.CollectedField, obj *model.MainPingResponse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MainPingResponse_jenkinsUrl(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.JenkinsURL, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MainPingResponse_jenkinsUrl(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MainPingResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MainPingResponse_message(ctx context.Context, field graphql.CollectedField, obj *model.MainPingResponse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MainPingResponse_message(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Message, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MainPingResponse_message(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MainPingResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MainPingResponse_time(ctx context.Context, field graphql.CollectedField, obj *model.MainPingResponse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MainPingResponse_time(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Time, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MainPingResponse_time(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MainPingResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MainPingResponse_timezone(ctx context.Context, field graphql.CollectedField, obj *model.MainPingResponse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MainPingResponse_timezone(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Timezone, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MainPingResponse_timezone(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MainPingResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MainSinglePBSEventInfo_message(ctx context.Context, field graphql.CollectedField, obj *model.MainSinglePBSEventInfo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MainSinglePBSEventInfo_message(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Message, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MainSinglePBSEventInfo_message(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MainSinglePBSEventInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MainSinglePBSEventInfo_time(ctx context.Context, field graphql.CollectedField, obj *model.MainSinglePBSEventInfo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MainSinglePBSEventInfo_time(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Time, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MainSinglePBSEventInfo_time(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MainSinglePBSEventInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MainTransformArticleResponse_text(ctx context.Context, field graphql.CollectedField, obj *model.MainTransformArticleResponse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MainTransformArticleResponse_text(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Text, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MainTransformArticleResponse_text(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MainTransformArticleResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_postArticleProcess(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_postArticleProcess(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().PostArticleProcess(rctx, fc.Args["mainTransformArticleRequestInput"].(model.MainTransformArticleRequestInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.MainTransformArticleResponse)
	fc.Result = res
	return ec.marshalOMainTransformArticleResponse2ᚖIrisAPIsᚋserverᚋgraphᚋmodelᚐMainTransformArticleResponse(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_postArticleProcess(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "text":
				return ec.fieldContext_MainTransformArticleResponse_text(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type MainTransformArticleResponse", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_postArticleProcess_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_postCurrencyConvert(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_postCurrencyConvert(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().PostCurrencyConvert(rctx, fc.Args["mainCurrencyConvertInput"].(model.MainCurrencyConvertInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.MainCurrencyConvert)
	fc.Result = res
	return ec.marshalOMainCurrencyConvert2ᚖIrisAPIsᚋserverᚋgraphᚋmodelᚐMainCurrencyConvert(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_postCurrencyConvert(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "amount":
				return ec.fieldContext_MainCurrencyConvert_amount(ctx, field)
			case "from":
				return ec.fieldContext_MainCurrencyConvert_from(ctx, field)
			case "result":
				return ec.fieldContext_MainCurrencyConvert_result(ctx, field)
			case "to":
				return ec.fieldContext_MainCurrencyConvert_to(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type MainCurrencyConvert", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_postCurrencyConvert_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_mutationViewerApiKey(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_mutationViewerApiKey(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().MutationViewerAPIKey(rctx, fc.Args["apiKey"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.MutationViewerAPIKey)
	fc.Result = res
	return ec.marshalOMutationViewerApiKey2ᚖIrisAPIsᚋserverᚋgraphᚋmodelᚐMutationViewerAPIKey(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_mutationViewerApiKey(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "deleteChatbotUser":
				return ec.fieldContext_MutationViewerApiKey_deleteChatbotUser(ctx, field)
			case "postApiKey":
				return ec.fieldContext_MutationViewerApiKey_postApiKey(ctx, field)
			case "postChatbot":
				return ec.fieldContext_MutationViewerApiKey_postChatbot(ctx, field)
			case "postIp2nationBulk":
				return ec.fieldContext_MutationViewerApiKey_postIp2nationBulk(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type MutationViewerApiKey", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_mutationViewerApiKey_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_mutationViewerAnyAuth(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_mutationViewerAnyAuth(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().MutationViewerAnyAuth(rctx, fc.Args["apiKeyAuth"].(*model.APIKeyAuthInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.MutationViewerAnyAuth)
	fc.Result = res
	return ec.marshalOMutationViewerAnyAuth2ᚖIrisAPIsᚋserverᚋgraphᚋmodelᚐMutationViewerAnyAuth(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_mutationViewerAnyAuth(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "deleteChatbotUser":
				return ec.fieldContext_MutationViewerAnyAuth_deleteChatbotUser(ctx, field)
			case "postApiKey":
				return ec.fieldContext_MutationViewerAnyAuth_postApiKey(ctx, field)
			case "postChatbot":
				return ec.fieldContext_MutationViewerAnyAuth_postChatbot(ctx, field)
			case "postIp2nationBulk":
				return ec.fieldContext_MutationViewerAnyAuth_postIp2nationBulk(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type MutationViewerAnyAuth", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_mutationViewerAnyAuth_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _MutationViewerAnyAuth_deleteChatbotUser(ctx context.Context, field graphql.CollectedField, obj *model.MutationViewerAnyAuth) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MutationViewerAnyAuth_deleteChatbotUser(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeleteChatbotUser, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.MainChatbotResetUserResponse)
	fc.Result = res
	return ec.marshalOMainChatbotResetUserResponse2ᚖIrisAPIsᚋserverᚋgraphᚋmodelᚐMainChatbotResetUserResponse(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MutationViewerAnyAuth_deleteChatbotUser(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MutationViewerAnyAuth",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "message":
				return ec.fieldContext_MainChatbotResetUserResponse_message(ctx, field)
			case "user":
				return ec.fieldContext_MainChatbotResetUserResponse_user(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type MainChatbotResetUserResponse", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_MutationViewerAnyAuth_deleteChatbotUser_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _MutationViewerAnyAuth_postApiKey(ctx context.Context, field graphql.CollectedField, obj *model.MutationViewerAnyAuth) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MutationViewerAnyAuth_postApiKey(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PostAPIKey, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.MainIssueAPIKeyResponse)
	fc.Result = res
	return ec.marshalOMainIssueApiKeyResponse2ᚖIrisAPIsᚋserverᚋgraphᚋmodelᚐMainIssueAPIKeyResponse(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MutationViewerAnyAuth_postApiKey(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MutationViewerAnyAuth",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "key":
				return ec.fieldContext_MainIssueApiKeyResponse_key(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type MainIssueApiKeyResponse", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_MutationViewerAnyAuth_postApiKey_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _MutationViewerAnyAuth_postChatbot(ctx context.Context, field graphql.CollectedField, obj *model.MutationViewerAnyAuth) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MutationViewerAnyAuth_postChatbot(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PostChatbot, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.MainChatbotReactResponse)
	fc.Result = res
	return ec.marshalOMainChatbotReactResponse2ᚖIrisAPIsᚋserverᚋgraphᚋmodelᚐMainChatbotReactResponse(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MutationViewerAnyAuth_postChatbot(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MutationViewerAnyAuth",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "error":
				return ec.fieldContext_MainChatbotReactResponse_error(ctx, field)
			case "invalidKeywords":
				return ec.fieldContext_MainChatbotReactResponse_invalidKeywords(ctx, field)
			case "keywords":
				return ec.fieldContext_MainChatbotReactResponse_keywords(ctx, field)
			case "message":
				return ec.fieldContext_MainChatbotReactResponse_message(ctx, field)
			case "next":
				return ec.fieldContext_MainChatbotReactResponse_next(ctx, field)
			case "prompt":
				return ec.fieldContext_MainChatbotReactResponse_prompt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type MainChatbotReactResponse", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_MutationViewerAnyAuth_postChatbot_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _MutationViewerAnyAuth_postIp2nationBulk(ctx context.Context, field graphql.CollectedField, obj *model.MutationViewerAnyAuth) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MutationViewerAnyAuth_postIp2nationBulk(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PostIP2nationBulk, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.MainIPNationCountriesBulkResponse)
	fc.Result = res
	return ec.marshalOMainIpNationCountriesBulkResponse2ᚖIrisAPIsᚋserverᚋgraphᚋmodelᚐMainIPNationCountriesBulkResponse(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MutationViewerAnyAuth_postIp2nationBulk(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MutationViewerAnyAuth",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "ipAddrResult":
				return ec.fieldContext_MainIpNationCountriesBulkResponse_ipAddrResult(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type MainIpNationCountriesBulkResponse", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_MutationViewerAnyAuth_postIp2nationBulk_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _MutationViewerApiKey_deleteChatbotUser(ctx context.Context, field graphql.CollectedField, obj *model.MutationViewerAPIKey) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MutationViewerApiKey_deleteChatbotUser(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeleteChatbotUser, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.MainChatbotResetUserResponse)
	fc.Result = res
	return ec.marshalOMainChatbotResetUserResponse2ᚖIrisAPIsᚋserverᚋgraphᚋmodelᚐMainChatbotResetUserResponse(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MutationViewerApiKey_deleteChatbotUser(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MutationViewerApiKey",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "message":
				return ec.fieldContext_MainChatbotResetUserResponse_message(ctx, field)
			case "user":
				return ec.fieldContext_MainChatbotResetUserResponse_user(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type MainChatbotResetUserResponse", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_MutationViewerApiKey_deleteChatbotUser_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _MutationViewerApiKey_postApiKey(ctx context.Context, field graphql.CollectedField, obj *model.MutationViewerAPIKey) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MutationViewerApiKey_postApiKey(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PostAPIKey, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.MainIssueAPIKeyResponse)
	fc.Result = res
	return ec.marshalOMainIssueApiKeyResponse2ᚖIrisAPIsᚋserverᚋgraphᚋmodelᚐMainIssueAPIKeyResponse(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MutationViewerApiKey_postApiKey(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MutationViewerApiKey",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "key":
				return ec.fieldContext_MainIssueApiKeyResponse_key(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type MainIssueApiKeyResponse", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_MutationViewerApiKey_postApiKey_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _MutationViewerApiKey_postChatbot(ctx context.Context, field graphql.CollectedField, obj *model.MutationViewerAPIKey) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MutationViewerApiKey_postChatbot(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PostChatbot, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.MainChatbotReactResponse)
	fc.Result = res
	return ec.marshalOMainChatbotReactResponse2ᚖIrisAPIsᚋserverᚋgraphᚋmodelᚐMainChatbotReactResponse(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MutationViewerApiKey_postChatbot(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MutationViewerApiKey",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "error":
				return ec.fieldContext_MainChatbotReactResponse_error(ctx, field)
			case "invalidKeywords":
				return ec.fieldContext_MainChatbotReactResponse_invalidKeywords(ctx, field)
			case "keywords":
				return ec.fieldContext_MainChatbotReactResponse_keywords(ctx, field)
			case "message":
				return ec.fieldContext_MainChatbotReactResponse_message(ctx, field)
			case "next":
				return ec.fieldContext_MainChatbotReactResponse_next(ctx, field)
			case "prompt":
				return ec.fieldContext_MainChatbotReactResponse_prompt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type MainChatbotReactResponse", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_MutationViewerApiKey_postChatbot_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _MutationViewerApiKey_postIp2nationBulk(ctx context.Context, field graphql.CollectedField, obj *model.MutationViewerAPIKey) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MutationViewerApiKey_postIp2nationBulk(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PostIP2nationBulk, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.MainIPNationCountriesBulkResponse)
	fc.Result = res
	return ec.marshalOMainIpNationCountriesBulkResponse2ᚖIrisAPIsᚋserverᚋgraphᚋmodelᚐMainIPNationCountriesBulkResponse(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MutationViewerApiKey_postIp2nationBulk(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MutationViewerApiKey",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "ipAddrResult":
				return ec.fieldContext_MainIpNationCountriesBulkResponse_ipAddrResult(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type MainIpNationCountriesBulkResponse", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_MutationViewerApiKey_postIp2nationBulk_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_mainGetServiceStatusByIdResponse(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_mainGetServiceStatusByIdResponse(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().MainGetServiceStatusByIDResponse(rctx, fc.Args["id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.MainGetServiceStatusByIDResponse)
	fc.Result = res
	return ec.marshalOMainGetServiceStatusByIdResponse2ᚖIrisAPIsᚋserverᚋgraphᚋmodelᚐMainGetServiceStatusByIDResponse(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_mainGetServiceStatusByIdResponse(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_MainGetServiceStatusByIdResponse_id(ctx, field)
			case "message":
				return ec.fieldContext_MainGetServiceStatusByIdResponse_message(ctx, field)
			case "name":
				return ec.fieldContext_MainGetServiceStatusByIdResponse_name(ctx, field)
			case "status":
				return ec.fieldContext_MainGetServiceStatusByIdResponse_status(ctx, field)
			case "type":
				return ec.fieldContext_MainGetServiceStatusByIdResponse_type(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type MainGetServiceStatusByIdResponse", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_mainGetServiceStatusByIdResponse_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_mainIpNationMyIPResponse(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_mainIpNationMyIPResponse(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().MainIPNationMyIPResponse(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.MainIPNationMyIPResponse)
	fc.Result = res
	return ec.marshalOMainIpNationMyIPResponse2ᚖIrisAPIsᚋserverᚋgraphᚋmodelᚐMainIPNationMyIPResponse(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_mainIpNationMyIPResponse(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "country":
				return ec.fieldContext_MainIpNationMyIPResponse_country(ctx, field)
			case "countrySymbol":
				return ec.fieldContext_MainIpNationMyIPResponse_countrySymbol(ctx, field)
			case "ipAddr":
				return ec.fieldContext_MainIpNationMyIPResponse_ipAddr(ctx, field)
			case "lat":
				return ec.fieldContext_MainIpNationMyIPResponse_lat(ctx, field)
			case "lon":
				return ec.fieldContext_MainIpNationMyIPResponse_lon(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type MainIpNationMyIPResponse", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Query_mainPingResponse(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_mainPingResponse(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().MainPingResponse(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.MainPingResponse)
	fc.Result = res
	return ec.marshalOMainPingResponse2ᚖIrisAPIsᚋserverᚋgraphᚋmodelᚐMainPingResponse(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_mainPingResponse(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "buildTimestamp":
				return ec.fieldContext_MainPingResponse_buildTimestamp(ctx, field)
			case "hostname":
				return ec.fieldContext_MainPingResponse_hostname(ctx, field)
			case "imageTag":
				return ec.fieldContext_MainPingResponse_imageTag(ctx, field)
			case "jenkinsUrl":
				return ec.fieldContext_MainPingResponse_jenkinsUrl(ctx, field)
			case "message":
				return ec.fieldContext_MainPingResponse_message(ctx, field)
			case "time":
				return ec.fieldContext_MainPingResponse_time(ctx, field)
			case "timezone":
				return ec.fieldContext_MainPingResponse_timezone(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type MainPingResponse", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Query_pbsRecent(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_pbsRecent(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().PbsRecent(rctx, fc.Args["format"].(*string), fc.Args["period"].(*string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.MainGetRecentPBSDataResponse)
	fc.Result = res
	return ec.marshalOMainGetRecentPBSDataResponse2ᚕᚖIrisAPIsᚋserverᚋgraphᚋmodelᚐMainGetRecentPBSDataResponse(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_pbsRecent(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "events":
				return ec.fieldContext_MainGetRecentPBSDataResponse_events(ctx, field)
			case "id":
				return ec.fieldContext_MainGetRecentPBSDataResponse_id(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type MainGetRecentPBSDataResponse", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_pbsRecent_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_service(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_service(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Service(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.MainGetServiceStatusByIDResponse)
	fc.Result = res
	return ec.marshalOMainGetServiceStatusByIdResponse2ᚕᚖIrisAPIsᚋserverᚋgraphᚋmodelᚐMainGetServiceStatusByIDResponse(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_service(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_MainGetServiceStatusByIdResponse_id(ctx, field)
			case "message":
				return ec.fieldContext_MainGetServiceStatusByIdResponse_message(ctx, field)
			case "name":
				return ec.fieldContext_MainGetServiceStatusByIdResponse_name(ctx, field)
			case "status":
				return ec.fieldContext_MainGetServiceStatusByIdResponse_status(ctx, field)
			case "type":
				return ec.fieldContext_MainGetServiceStatusByIdResponse_type(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type MainGetServiceStatusByIdResponse", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Query_serviceLogs(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_serviceLogs(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().ServiceLogs(rctx, fc.Args["id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_serviceLogs(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_serviceLogs_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_viewerApiKey(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_viewerApiKey(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().ViewerAPIKey(rctx, fc.Args["apiKey"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ViewerAPIKey)
	fc.Result = res
	return ec.marshalOViewerApiKey2ᚖIrisAPIsᚋserverᚋgraphᚋmodelᚐViewerAPIKey(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_viewerApiKey(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "apiKey":
				return ec.fieldContext_ViewerApiKey_apiKey(ctx, field)
			case "currency":
				return ec.fieldContext_ViewerApiKey_currency(ctx, field)
			case "mainApiKeyDetail":
				return ec.fieldContext_ViewerApiKey_mainApiKeyDetail(ctx, field)
			case "mainApiKeyUsage":
				return ec.fieldContext_ViewerApiKey_mainApiKeyUsage(ctx, field)
			case "mainGenericResultResponse":
				return ec.fieldContext_ViewerApiKey_mainGenericResultResponse(ctx, field)
			case "mainIpNationCountries":
				return ec.fieldContext_ViewerApiKey_mainIpNationCountries(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ViewerApiKey", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_viewerApiKey_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_viewerAnyAuth(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_viewerAnyAuth(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().ViewerAnyAuth(rctx, fc.Args["apiKeyAuth"].(*model.APIKeyAuthInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ViewerAnyAuth)
	fc.Result = res
	return ec.marshalOViewerAnyAuth2ᚖIrisAPIsᚋserverᚋgraphᚋmodelᚐViewerAnyAuth(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_viewerAnyAuth(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "apiKey":
				return ec.fieldContext_ViewerAnyAuth_apiKey(ctx, field)
			case "currency":
				return ec.fieldContext_ViewerAnyAuth_currency(ctx, field)
			case "mainApiKeyDetail":
				return ec.fieldContext_ViewerAnyAuth_mainApiKeyDetail(ctx, field)
			case "mainApiKeyUsage":
				return ec.fieldContext_ViewerAnyAuth_mainApiKeyUsage(ctx, field)
			case "mainGenericResultResponse":
				return ec.fieldContext_ViewerAnyAuth_mainGenericResultResponse(ctx, field)
			case "mainIpNationCountries":
				return ec.fieldContext_ViewerAnyAuth_mainIpNationCountries(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ViewerAnyAuth", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_viewerAnyAuth_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query___type(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query___type(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.introspectType(fc.Args["name"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query___type(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query___type_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query___schema(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query___schema(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.introspectSchema()
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Schema)
	fc.Result = res
	return ec.marshalO__Schema2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐSchema(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query___schema(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "description":
				return ec.fieldContext___Schema_description(ctx, field)
			case "types":
				return ec.fieldContext___Schema_types(ctx, field)
			case "queryType":
				return ec.fieldContext___Schema_queryType(ctx, field)
			case "mutationType":
				return ec.fieldContext___Schema_mutationType(ctx, field)
			case "subscriptionType":
				return ec.fieldContext___Schema_subscriptionType(ctx, field)
			case "directives":
				return ec.fieldContext___Schema_directives(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Schema", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ViewerAnyAuth_apiKey(ctx context.Context, field graphql.CollectedField, obj *model.ViewerAnyAuth) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ViewerAnyAuth_apiKey(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.APIKey, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.MainAPIKeyBrief)
	fc.Result = res
	return ec.marshalOMainApiKeyBrief2ᚕᚖIrisAPIsᚋserverᚋgraphᚋmodelᚐMainAPIKeyBrief(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ViewerAnyAuth_apiKey(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ViewerAnyAuth",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_MainApiKeyBrief_id(ctx, field)
			case "key":
				return ec.fieldContext_MainApiKeyBrief_key(ctx, field)
			case "privileged":
				return ec.fieldContext_MainApiKeyBrief_privileged(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type MainApiKeyBrief", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ViewerAnyAuth_currency(ctx context.Context, field graphql.CollectedField, obj *model.ViewerAnyAuth) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ViewerAnyAuth_currency(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Currency, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ViewerAnyAuth_currency(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ViewerAnyAuth",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ViewerAnyAuth_mainApiKeyDetail(ctx context.Context, field graphql.CollectedField, obj *model.ViewerAnyAuth) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ViewerAnyAuth_mainApiKeyDetail(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MainAPIKeyDetail, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.MainAPIKeyDetail)
	fc.Result = res
	return ec.marshalOMainApiKeyDetail2ᚖIrisAPIsᚋserverᚋgraphᚋmodelᚐMainAPIKeyDetail(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ViewerAnyAuth_mainApiKeyDetail(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ViewerAnyAuth",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "application":
				return ec.fieldContext_MainApiKeyDetail_application(ctx, field)
			case "id":
				return ec.fieldContext_MainApiKeyDetail_id(ctx, field)
			case "issueBy":
				return ec.fieldContext_MainApiKeyDetail_issueBy(ctx, field)
			case "key":
				return ec.fieldContext_MainApiKeyDetail_key(ctx, field)
			case "privileged":
				return ec.fieldContext_MainApiKeyDetail_privileged(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type MainApiKeyDetail", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_ViewerAnyAuth_mainApiKeyDetail_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _ViewerAnyAuth_mainApiKeyUsage(ctx context.Context, field graphql.CollectedField, obj *model.ViewerAnyAuth) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ViewerAnyAuth_mainApiKeyUsage(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MainAPIKeyUsage, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.MainAPIKeyUsage)
	fc.Result = res
	return ec.marshalOMainApiKeyUsage2ᚖIrisAPIsᚋserverᚋgraphᚋmodelᚐMainAPIKeyUsage(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ViewerAnyAuth_mainApiKeyUsage(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ViewerAnyAuth",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "access":
				return ec.fieldContext_MainApiKeyUsage_access(ctx, field)
			case "id":
				return ec.fieldContext_MainApiKeyUsage_id(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type MainApiKeyUsage", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_ViewerAnyAuth_mainApiKeyUsage_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _ViewerAnyAuth_mainGenericResultResponse(ctx context.Context, field graphql.CollectedField, obj *model.ViewerAnyAuth) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ViewerAnyAuth_mainGenericResultResponse(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MainGenericResultResponse, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.MainGenericResultResponse)
	fc.Result = res
	return ec.marshalOMainGenericResultResponse2ᚖIrisAPIsᚋserverᚋgraphᚋmodelᚐMainGenericResultResponse(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ViewerAnyAuth_mainGenericResultResponse(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ViewerAnyAuth",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "result":
				return ec.fieldContext_MainGenericResultResponse_result(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type MainGenericResultResponse", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ViewerAnyAuth_mainIpNationCountries(ctx context.Context, field graphql.CollectedField, obj *model.ViewerAnyAuth) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ViewerAnyAuth_mainIpNationCountries(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MainIPNationCountries, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOJSON2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ViewerAnyAuth_mainIpNationCountries(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ViewerAnyAuth",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type JSON does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_ViewerAnyAuth_mainIpNationCountries_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _ViewerApiKey_apiKey(ctx context.Context, field graphql.CollectedField, obj *model.ViewerAPIKey) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ViewerApiKey_apiKey(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.APIKey, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.MainAPIKeyBrief)
	fc.Result = res
	return ec.marshalOMainApiKeyBrief2ᚕᚖIrisAPIsᚋserverᚋgraphᚋmodelᚐMainAPIKeyBrief(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ViewerApiKey_apiKey(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ViewerApiKey",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_MainApiKeyBrief_id(ctx, field)
			case "key":
				return ec.fieldContext_MainApiKeyBrief_key(ctx, field)
			case "privileged":
				return ec.fieldContext_MainApiKeyBrief_privileged(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type MainApiKeyBrief", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ViewerApiKey_currency(ctx context.Context, field graphql.CollectedField, obj *model.ViewerAPIKey) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ViewerApiKey_currency(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Currency, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ViewerApiKey_currency(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ViewerApiKey",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ViewerApiKey_mainApiKeyDetail(ctx context.Context, field graphql.CollectedField, obj *model.ViewerAPIKey) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ViewerApiKey_mainApiKeyDetail(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MainAPIKeyDetail, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.MainAPIKeyDetail)
	fc.Result = res
	return ec.marshalOMainApiKeyDetail2ᚖIrisAPIsᚋserverᚋgraphᚋmodelᚐMainAPIKeyDetail(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ViewerApiKey_mainApiKeyDetail(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ViewerApiKey",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "application":
				return ec.fieldContext_MainApiKeyDetail_application(ctx, field)
			case "id":
				return ec.fieldContext_MainApiKeyDetail_id(ctx, field)
			case "issueBy":
				return ec.fieldContext_MainApiKeyDetail_issueBy(ctx, field)
			case "key":
				return ec.fieldContext_MainApiKeyDetail_key(ctx, field)
			case "privileged":
				return ec.fieldContext_MainApiKeyDetail_privileged(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type MainApiKeyDetail", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_ViewerApiKey_mainApiKeyDetail_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _ViewerApiKey_mainApiKeyUsage(ctx context.Context, field graphql.CollectedField, obj *model.ViewerAPIKey) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ViewerApiKey_mainApiKeyUsage(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MainAPIKeyUsage, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.MainAPIKeyUsage)
	fc.Result = res
	return ec.marshalOMainApiKeyUsage2ᚖIrisAPIsᚋserverᚋgraphᚋmodelᚐMainAPIKeyUsage(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ViewerApiKey_mainApiKeyUsage(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ViewerApiKey",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "access":
				return ec.fieldContext_MainApiKeyUsage_access(ctx, field)
			case "id":
				return ec.fieldContext_MainApiKeyUsage_id(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type MainApiKeyUsage", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_ViewerApiKey_mainApiKeyUsage_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _ViewerApiKey_mainGenericResultResponse(ctx context.Context, field graphql.CollectedField, obj *model.ViewerAPIKey) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ViewerApiKey_mainGenericResultResponse(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MainGenericResultResponse, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.MainGenericResultResponse)
	fc.Result = res
	return ec.marshalOMainGenericResultResponse2ᚖIrisAPIsᚋserverᚋgraphᚋmodelᚐMainGenericResultResponse(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ViewerApiKey_mainGenericResultResponse(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ViewerApiKey",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "result":
				return ec.fieldContext_MainGenericResultResponse_result(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type MainGenericResultResponse", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ViewerApiKey_mainIpNationCountries(ctx context.Context, field graphql.CollectedField, obj *model.ViewerAPIKey) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ViewerApiKey_mainIpNationCountries(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MainIPNationCountries, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOJSON2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ViewerApiKey_mainIpNationCountries(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ViewerApiKey",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type JSON does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_ViewerApiKey_mainIpNationCountries_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) ___Directive_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Directive_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Directive_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Directive_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Directive_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Directive_description(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Directive_locations(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Directive_locations(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Locations, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalN__DirectiveLocation2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Directive_locations(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type __DirectiveLocation does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Directive_args(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Directive_args(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Args, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.InputValue)
	fc.Result = res
	return ec.marshalN__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Directive_args(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext___InputValue_name(ctx, field)
			case "description":
				return ec.fieldContext___InputValue_description(ctx, field)
			case "type":
				return ec.fieldContext___InputValue_type(ctx, field)
			case "defaultValue":
				return ec.fieldContext___InputValue_defaultValue(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __InputValue", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Directive_isRepeatable(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Directive_isRepeatable(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsRepeatable, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Directive_isRepeatable(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___EnumValue_name(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___EnumValue_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___EnumValue_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___EnumValue_description(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___EnumValue_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___EnumValue_description(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___EnumValue_isDeprecated(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___EnumValue_isDeprecated(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeprecated(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___EnumValue_isDeprecated(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___EnumValue_deprecationReason(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___EnumValue_deprecationReason(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeprecationReason(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___EnumValue_deprecationReason(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Field_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Field_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Field_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Field_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Field_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Field_description(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Field_args(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Field_args(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Args, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.InputValue)
	fc.Result = res
	return ec.marshalN__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Field_args(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext___InputValue_name(ctx, field)
			case "description":
				return ec.fieldContext___InputValue_description(ctx, field)
			case "type":
				return ec.fieldContext___InputValue_type(ctx, field)
			case "defaultValue":
				return ec.fieldContext___InputValue_defaultValue(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __InputValue", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Field_type(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Field_type(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Field_type(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Field_isDeprecated(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Field_isDeprecated(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeprecated(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Field_isDeprecated(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Field_deprecationReason(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Field_deprecationReason(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeprecationReason(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Field_deprecationReason(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___InputValue_name(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___InputValue_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___InputValue_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___InputValue_description(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___InputValue_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___InputValue_description(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___InputValue_type(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___InputValue_type(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___InputValue_type(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___InputValue_defaultValue(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___InputValue_defaultValue(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DefaultValue, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___InputValue_defaultValue(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Schema_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Schema_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Schema_description(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Schema_types(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Schema_types(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Types(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Schema_types(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Schema_queryType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Schema_queryType(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.QueryType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Schema_queryType(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Schema_mutationType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Schema_mutationType(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MutationType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Schema_mutationType(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Schema_subscriptionType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Schema_subscriptionType(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SubscriptionType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Schema_subscriptionType(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Schema_directives(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Schema_directives(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Directives(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.Directive)
	fc.Result = res
	return ec.marshalN__Directive2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirectiveᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Schema_directives(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext___Directive_name(ctx, field)
			case "description":
				return ec.fieldContext___Directive_description(ctx, field)
			case "locations":
				return ec.fieldContext___Directive_locations(ctx, field)
			case "args":
				return ec.fieldContext___Directive_args(ctx, field)
			case "isRepeatable":
				return ec.fieldContext___Directive_isRepeatable(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Directive", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_kind(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_kind(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Kind(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalN__TypeKind2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_kind(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type __TypeKind does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_description(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_fields(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_fields(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Fields(fc.Args["includeDeprecated"].(bool)), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.Field)
	fc.Result = res
	return ec.marshalO__Field2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐFieldᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_fields(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext___Field_name(ctx, field)
			case "description":
				return ec.fieldContext___Field_description(ctx, field)
			case "args":
				return ec.fieldContext___Field_args(ctx, field)
			case "type":
				return ec.fieldContext___Field_type(ctx, field)
			case "isDeprecated":
				return ec.fieldContext___Field_isDeprecated(ctx, field)
			case "deprecationReason":
				return ec.fieldContext___Field_deprecationReason(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Field", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field___Type_fields_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) ___Type_interfaces(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_interfaces(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Interfaces(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_interfaces(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_possibleTypes(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_possibleTypes(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PossibleTypes(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_possibleTypes(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_enumValues(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_enumValues(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EnumValues(fc.Args["includeDeprecated"].(bool)), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.EnumValue)
	fc.Result = res
	return ec.marshalO__EnumValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_enumValues(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext___EnumValue_name(ctx, field)
			case "description":
				return ec.fieldContext___EnumValue_description(ctx, field)
			case "isDeprecated":
				return ec.fieldContext___EnumValue_isDeprecated(ctx, field)
			case "deprecationReason":
				return ec.fieldContext___EnumValue_deprecationReason(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __EnumValue", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field___Type_enumValues_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) ___Type_inputFields(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_inputFields(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InputFields(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.InputValue)
	fc.Result = res
	return ec.marshalO__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_inputFields(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext___InputValue_name(ctx, field)
			case "description":
				return ec.fieldContext___InputValue_description(ctx, field)
			case "type":
				return ec.fieldContext___InputValue_type(ctx, field)
			case "defaultValue":
				return ec.fieldContext___InputValue_defaultValue(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __InputValue", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_ofType(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_ofType(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OfType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_ofType(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_specifiedByURL(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_specifiedByURL(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SpecifiedByURL(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_specifiedByURL(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

// endregion **************************** field.gotpl *****************************

// region    **************************** input.gotpl *****************************

func (ec *executionContext) unmarshalInputApiKeyAuthInput(ctx context.Context, obj interface{}) (model.APIKeyAuthInput, error) {
	var it model.APIKeyAuthInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "apiKey":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("apiKey"))
			it.APIKey, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputMainChatbotConversationInput(ctx context.Context, obj interface{}) (model.MainChatbotConversationInput, error) {
	var it model.MainChatbotConversationInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "input":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
			it.Input, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "user":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("user"))
			it.User, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputMainCurrencyConvertInput(ctx context.Context, obj interface{}) (model.MainCurrencyConvertInput, error) {
	var it model.MainCurrencyConvertInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "amount":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("amount"))
			it.Amount, err = ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "from":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("from"))
			it.From, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "result":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("result"))
			it.Result, err = ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "to":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("to"))
			it.To, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputMainIpNationCountriesBulkInput(ctx context.Context, obj interface{}) (model.MainIPNationCountriesBulkInput, error) {
	var it model.MainIPNationCountriesBulkInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "ipAddrList":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ipAddrList"))
			it.IPAddrList, err = ec.unmarshalOString2ᚕᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputMainIssueApiKeyPayloadInput(ctx context.Context, obj interface{}) (model.MainIssueAPIKeyPayloadInput, error) {
	var it model.MainIssueAPIKeyPayloadInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "application":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("application"))
			it.Application, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "useInHeader":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("useInHeader"))
			it.UseInHeader, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "useInQueryParam":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("useInQueryParam"))
			it.UseInQueryParam, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputMainTransformArticleRequestInput(ctx context.Context, obj interface{}) (model.MainTransformArticleRequestInput, error) {
	var it model.MainTransformArticleRequestInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "bytesPerLine":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("bytesPerLine"))
			it.BytesPerLine, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "text":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("text"))
			it.Text, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

// endregion **************************** input.gotpl *****************************

// region    ************************** interface.gotpl ***************************

// endregion ************************** interface.gotpl ***************************

// region    **************************** object.gotpl ****************************

var mainAccessRecordImplementors = []string{"MainAccessRecord"}

func (ec *executionContext) _MainAccessRecord(ctx context.Context, sel ast.SelectionSet, obj *model.MainAccessRecord) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, mainAccessRecordImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("MainAccessRecord")
		case "ip":

			out.Values[i] = ec._MainAccessRecord_ip(ctx, field, obj)

		case "path":

			out.Values[i] = ec._MainAccessRecord_path(ctx, field, obj)

		case "time":

			out.Values[i] = ec._MainAccessRecord_time(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var mainApiKeyBriefImplementors = []string{"MainApiKeyBrief"}

func (ec *executionContext) _MainApiKeyBrief(ctx context.Context, sel ast.SelectionSet, obj *model.MainAPIKeyBrief) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, mainApiKeyBriefImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("MainApiKeyBrief")
		case "id":

			out.Values[i] = ec._MainApiKeyBrief_id(ctx, field, obj)

		case "key":

			out.Values[i] = ec._MainApiKeyBrief_key(ctx, field, obj)

		case "privileged":

			out.Values[i] = ec._MainApiKeyBrief_privileged(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var mainApiKeyDetailImplementors = []string{"MainApiKeyDetail"}

func (ec *executionContext) _MainApiKeyDetail(ctx context.Context, sel ast.SelectionSet, obj *model.MainAPIKeyDetail) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, mainApiKeyDetailImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("MainApiKeyDetail")
		case "application":

			out.Values[i] = ec._MainApiKeyDetail_application(ctx, field, obj)

		case "id":

			out.Values[i] = ec._MainApiKeyDetail_id(ctx, field, obj)

		case "issueBy":

			out.Values[i] = ec._MainApiKeyDetail_issueBy(ctx, field, obj)

		case "key":

			out.Values[i] = ec._MainApiKeyDetail_key(ctx, field, obj)

		case "privileged":

			out.Values[i] = ec._MainApiKeyDetail_privileged(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var mainApiKeyUsageImplementors = []string{"MainApiKeyUsage"}

func (ec *executionContext) _MainApiKeyUsage(ctx context.Context, sel ast.SelectionSet, obj *model.MainAPIKeyUsage) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, mainApiKeyUsageImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("MainApiKeyUsage")
		case "access":

			out.Values[i] = ec._MainApiKeyUsage_access(ctx, field, obj)

		case "id":

			out.Values[i] = ec._MainApiKeyUsage_id(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var mainChatbotReactResponseImplementors = []string{"MainChatbotReactResponse"}

func (ec *executionContext) _MainChatbotReactResponse(ctx context.Context, sel ast.SelectionSet, obj *model.MainChatbotReactResponse) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, mainChatbotReactResponseImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("MainChatbotReactResponse")
		case "error":

			out.Values[i] = ec._MainChatbotReactResponse_error(ctx, field, obj)

		case "invalidKeywords":

			out.Values[i] = ec._MainChatbotReactResponse_invalidKeywords(ctx, field, obj)

		case "keywords":

			out.Values[i] = ec._MainChatbotReactResponse_keywords(ctx, field, obj)

		case "message":

			out.Values[i] = ec._MainChatbotReactResponse_message(ctx, field, obj)

		case "next":

			out.Values[i] = ec._MainChatbotReactResponse_next(ctx, field, obj)

		case "prompt":

			out.Values[i] = ec._MainChatbotReactResponse_prompt(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var mainChatbotResetUserResponseImplementors = []string{"MainChatbotResetUserResponse"}

func (ec *executionContext) _MainChatbotResetUserResponse(ctx context.Context, sel ast.SelectionSet, obj *model.MainChatbotResetUserResponse) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, mainChatbotResetUserResponseImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("MainChatbotResetUserResponse")
		case "message":

			out.Values[i] = ec._MainChatbotResetUserResponse_message(ctx, field, obj)

		case "user":

			out.Values[i] = ec._MainChatbotResetUserResponse_user(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var mainCurrencyConvertImplementors = []string{"MainCurrencyConvert"}

func (ec *executionContext) _MainCurrencyConvert(ctx context.Context, sel ast.SelectionSet, obj *model.MainCurrencyConvert) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, mainCurrencyConvertImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("MainCurrencyConvert")
		case "amount":

			out.Values[i] = ec._MainCurrencyConvert_amount(ctx, field, obj)

		case "from":

			out.Values[i] = ec._MainCurrencyConvert_from(ctx, field, obj)

		case "result":

			out.Values[i] = ec._MainCurrencyConvert_result(ctx, field, obj)

		case "to":

			out.Values[i] = ec._MainCurrencyConvert_to(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var mainGenericResultResponseImplementors = []string{"MainGenericResultResponse"}

func (ec *executionContext) _MainGenericResultResponse(ctx context.Context, sel ast.SelectionSet, obj *model.MainGenericResultResponse) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, mainGenericResultResponseImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("MainGenericResultResponse")
		case "result":

			out.Values[i] = ec._MainGenericResultResponse_result(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var mainGetRecentPBSDataResponseImplementors = []string{"MainGetRecentPBSDataResponse"}

func (ec *executionContext) _MainGetRecentPBSDataResponse(ctx context.Context, sel ast.SelectionSet, obj *model.MainGetRecentPBSDataResponse) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, mainGetRecentPBSDataResponseImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("MainGetRecentPBSDataResponse")
		case "events":

			out.Values[i] = ec._MainGetRecentPBSDataResponse_events(ctx, field, obj)

		case "id":

			out.Values[i] = ec._MainGetRecentPBSDataResponse_id(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var mainGetServiceStatusByIdResponseImplementors = []string{"MainGetServiceStatusByIdResponse"}

func (ec *executionContext) _MainGetServiceStatusByIdResponse(ctx context.Context, sel ast.SelectionSet, obj *model.MainGetServiceStatusByIDResponse) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, mainGetServiceStatusByIdResponseImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("MainGetServiceStatusByIdResponse")
		case "id":

			out.Values[i] = ec._MainGetServiceStatusByIdResponse_id(ctx, field, obj)

		case "message":

			out.Values[i] = ec._MainGetServiceStatusByIdResponse_message(ctx, field, obj)

		case "name":

			out.Values[i] = ec._MainGetServiceStatusByIdResponse_name(ctx, field, obj)

		case "status":

			out.Values[i] = ec._MainGetServiceStatusByIdResponse_status(ctx, field, obj)

		case "type":

			out.Values[i] = ec._MainGetServiceStatusByIdResponse_type(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var mainIpNationCountriesBulkResponseImplementors = []string{"MainIpNationCountriesBulkResponse"}

func (ec *executionContext) _MainIpNationCountriesBulkResponse(ctx context.Context, sel ast.SelectionSet, obj *model.MainIPNationCountriesBulkResponse) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, mainIpNationCountriesBulkResponseImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("MainIpNationCountriesBulkResponse")
		case "ipAddrResult":

			out.Values[i] = ec._MainIpNationCountriesBulkResponse_ipAddrResult(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var mainIpNationMyIPResponseImplementors = []string{"MainIpNationMyIPResponse"}

func (ec *executionContext) _MainIpNationMyIPResponse(ctx context.Context, sel ast.SelectionSet, obj *model.MainIPNationMyIPResponse) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, mainIpNationMyIPResponseImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("MainIpNationMyIPResponse")
		case "country":

			out.Values[i] = ec._MainIpNationMyIPResponse_country(ctx, field, obj)

		case "countrySymbol":

			out.Values[i] = ec._MainIpNationMyIPResponse_countrySymbol(ctx, field, obj)

		case "ipAddr":

			out.Values[i] = ec._MainIpNationMyIPResponse_ipAddr(ctx, field, obj)

		case "lat":

			out.Values[i] = ec._MainIpNationMyIPResponse_lat(ctx, field, obj)

		case "lon":

			out.Values[i] = ec._MainIpNationMyIPResponse_lon(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var mainIssueApiKeyResponseImplementors = []string{"MainIssueApiKeyResponse"}

func (ec *executionContext) _MainIssueApiKeyResponse(ctx context.Context, sel ast.SelectionSet, obj *model.MainIssueAPIKeyResponse) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, mainIssueApiKeyResponseImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("MainIssueApiKeyResponse")
		case "key":

			out.Values[i] = ec._MainIssueApiKeyResponse_key(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var mainPingResponseImplementors = []string{"MainPingResponse"}

func (ec *executionContext) _MainPingResponse(ctx context.Context, sel ast.SelectionSet, obj *model.MainPingResponse) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, mainPingResponseImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("MainPingResponse")
		case "buildTimestamp":

			out.Values[i] = ec._MainPingResponse_buildTimestamp(ctx, field, obj)

		case "hostname":

			out.Values[i] = ec._MainPingResponse_hostname(ctx, field, obj)

		case "imageTag":

			out.Values[i] = ec._MainPingResponse_imageTag(ctx, field, obj)

		case "jenkinsUrl":

			out.Values[i] = ec._MainPingResponse_jenkinsUrl(ctx, field, obj)

		case "message":

			out.Values[i] = ec._MainPingResponse_message(ctx, field, obj)

		case "time":

			out.Values[i] = ec._MainPingResponse_time(ctx, field, obj)

		case "timezone":

			out.Values[i] = ec._MainPingResponse_timezone(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var mainSinglePBSEventInfoImplementors = []string{"MainSinglePBSEventInfo"}

func (ec *executionContext) _MainSinglePBSEventInfo(ctx context.Context, sel ast.SelectionSet, obj *model.MainSinglePBSEventInfo) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, mainSinglePBSEventInfoImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("MainSinglePBSEventInfo")
		case "message":

			out.Values[i] = ec._MainSinglePBSEventInfo_message(ctx, field, obj)

		case "time":

			out.Values[i] = ec._MainSinglePBSEventInfo_time(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var mainTransformArticleResponseImplementors = []string{"MainTransformArticleResponse"}

func (ec *executionContext) _MainTransformArticleResponse(ctx context.Context, sel ast.SelectionSet, obj *model.MainTransformArticleResponse) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, mainTransformArticleResponseImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("MainTransformArticleResponse")
		case "text":

			out.Values[i] = ec._MainTransformArticleResponse_text(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var mutationImplementors = []string{"Mutation"}

func (ec *executionContext) _Mutation(ctx context.Context, sel ast.SelectionSet) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, mutationImplementors)
	ctx = graphql.WithFieldContext(ctx, &graphql.FieldContext{
		Object: "Mutation",
	})

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		innerCtx := graphql.WithRootFieldContext(ctx, &graphql.RootFieldContext{
			Object: field.Name,
			Field:  field,
		})

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Mutation")
		case "postArticleProcess":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_postArticleProcess(ctx, field)
			})

		case "postCurrencyConvert":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_postCurrencyConvert(ctx, field)
			})

		case "mutationViewerApiKey":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_mutationViewerApiKey(ctx, field)
			})

		case "mutationViewerAnyAuth":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_mutationViewerAnyAuth(ctx, field)
			})

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var mutationViewerAnyAuthImplementors = []string{"MutationViewerAnyAuth"}

func (ec *executionContext) _MutationViewerAnyAuth(ctx context.Context, sel ast.SelectionSet, obj *model.MutationViewerAnyAuth) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, mutationViewerAnyAuthImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("MutationViewerAnyAuth")
		case "deleteChatbotUser":

			out.Values[i] = ec._MutationViewerAnyAuth_deleteChatbotUser(ctx, field, obj)

		case "postApiKey":

			out.Values[i] = ec._MutationViewerAnyAuth_postApiKey(ctx, field, obj)

		case "postChatbot":

			out.Values[i] = ec._MutationViewerAnyAuth_postChatbot(ctx, field, obj)

		case "postIp2nationBulk":

			out.Values[i] = ec._MutationViewerAnyAuth_postIp2nationBulk(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var mutationViewerApiKeyImplementors = []string{"MutationViewerApiKey"}

func (ec *executionContext) _MutationViewerApiKey(ctx context.Context, sel ast.SelectionSet, obj *model.MutationViewerAPIKey) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, mutationViewerApiKeyImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("MutationViewerApiKey")
		case "deleteChatbotUser":

			out.Values[i] = ec._MutationViewerApiKey_deleteChatbotUser(ctx, field, obj)

		case "postApiKey":

			out.Values[i] = ec._MutationViewerApiKey_postApiKey(ctx, field, obj)

		case "postChatbot":

			out.Values[i] = ec._MutationViewerApiKey_postChatbot(ctx, field, obj)

		case "postIp2nationBulk":

			out.Values[i] = ec._MutationViewerApiKey_postIp2nationBulk(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var queryImplementors = []string{"Query"}

func (ec *executionContext) _Query(ctx context.Context, sel ast.SelectionSet) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, queryImplementors)
	ctx = graphql.WithFieldContext(ctx, &graphql.FieldContext{
		Object: "Query",
	})

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		innerCtx := graphql.WithRootFieldContext(ctx, &graphql.RootFieldContext{
			Object: field.Name,
			Field:  field,
		})

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Query")
		case "mainGetServiceStatusByIdResponse":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_mainGetServiceStatusByIdResponse(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "mainIpNationMyIPResponse":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_mainIpNationMyIPResponse(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "mainPingResponse":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_mainPingResponse(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "pbsRecent":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_pbsRecent(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "service":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_service(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "serviceLogs":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_serviceLogs(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "viewerApiKey":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_viewerApiKey(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "viewerAnyAuth":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_viewerAnyAuth(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "__type":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Query___type(ctx, field)
			})

		case "__schema":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Query___schema(ctx, field)
			})

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var viewerAnyAuthImplementors = []string{"ViewerAnyAuth"}

func (ec *executionContext) _ViewerAnyAuth(ctx context.Context, sel ast.SelectionSet, obj *model.ViewerAnyAuth) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, viewerAnyAuthImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ViewerAnyAuth")
		case "apiKey":

			out.Values[i] = ec._ViewerAnyAuth_apiKey(ctx, field, obj)

		case "currency":

			out.Values[i] = ec._ViewerAnyAuth_currency(ctx, field, obj)

		case "mainApiKeyDetail":

			out.Values[i] = ec._ViewerAnyAuth_mainApiKeyDetail(ctx, field, obj)

		case "mainApiKeyUsage":

			out.Values[i] = ec._ViewerAnyAuth_mainApiKeyUsage(ctx, field, obj)

		case "mainGenericResultResponse":

			out.Values[i] = ec._ViewerAnyAuth_mainGenericResultResponse(ctx, field, obj)

		case "mainIpNationCountries":

			out.Values[i] = ec._ViewerAnyAuth_mainIpNationCountries(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var viewerApiKeyImplementors = []string{"ViewerApiKey"}

func (ec *executionContext) _ViewerApiKey(ctx context.Context, sel ast.SelectionSet, obj *model.ViewerAPIKey) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, viewerApiKeyImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ViewerApiKey")
		case "apiKey":

			out.Values[i] = ec._ViewerApiKey_apiKey(ctx, field, obj)

		case "currency":

			out.Values[i] = ec._ViewerApiKey_currency(ctx, field, obj)

		case "mainApiKeyDetail":

			out.Values[i] = ec._ViewerApiKey_mainApiKeyDetail(ctx, field, obj)

		case "mainApiKeyUsage":

			out.Values[i] = ec._ViewerApiKey_mainApiKeyUsage(ctx, field, obj)

		case "mainGenericResultResponse":

			out.Values[i] = ec._ViewerApiKey_mainGenericResultResponse(ctx, field, obj)

		case "mainIpNationCountries":

			out.Values[i] = ec._ViewerApiKey_mainIpNationCountries(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __DirectiveImplementors = []string{"__Directive"}

func (ec *executionContext) ___Directive(ctx context.Context, sel ast.SelectionSet, obj *introspection.Directive) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __DirectiveImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Directive")
		case "name":

			out.Values[i] = ec.___Directive_name(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":

			out.Values[i] = ec.___Directive_description(ctx, field, obj)

		case "locations":

			out.Values[i] = ec.___Directive_locations(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "args":

			out.Values[i] = ec.___Directive_args(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "isRepeatable":

			out.Values[i] = ec.___Directive_isRepeatable(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __EnumValueImplementors = []string{"__EnumValue"}

func (ec *executionContext) ___EnumValue(ctx context.Context, sel ast.SelectionSet, obj *introspection.EnumValue) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __EnumValueImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__EnumValue")
		case "name":

			out.Values[i] = ec.___EnumValue_name(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":

			out.Values[i] = ec.___EnumValue_description(ctx, field, obj)

		case "isDeprecated":

			out.Values[i] = ec.___EnumValue_isDeprecated(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deprecationReason":

			out.Values[i] = ec.___EnumValue_deprecationReason(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __FieldImplementors = []string{"__Field"}

func (ec *executionContext) ___Field(ctx context.Context, sel ast.SelectionSet, obj *introspection.Field) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __FieldImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Field")
		case "name":

			out.Values[i] = ec.___Field_name(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":

			out.Values[i] = ec.___Field_description(ctx, field, obj)

		case "args":

			out.Values[i] = ec.___Field_args(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "type":

			out.Values[i] = ec.___Field_type(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "isDeprecated":

			out.Values[i] = ec.___Field_isDeprecated(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deprecationReason":

			out.Values[i] = ec.___Field_deprecationReason(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __InputValueImplementors = []string{"__InputValue"}

func (ec *executionContext) ___InputValue(ctx context.Context, sel ast.SelectionSet, obj *introspection.InputValue) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __InputValueImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__InputValue")
		case "name":

			out.Values[i] = ec.___InputValue_name(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":

			out.Values[i] = ec.___InputValue_description(ctx, field, obj)

		case "type":

			out.Values[i] = ec.___InputValue_type(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "defaultValue":

			out.Values[i] = ec.___InputValue_defaultValue(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __SchemaImplementors = []string{"__Schema"}

func (ec *executionContext) ___Schema(ctx context.Context, sel ast.SelectionSet, obj *introspection.Schema) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __SchemaImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Schema")
		case "description":

			out.Values[i] = ec.___Schema_description(ctx, field, obj)

		case "types":

			out.Values[i] = ec.___Schema_types(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "queryType":

			out.Values[i] = ec.___Schema_queryType(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "mutationType":

			out.Values[i] = ec.___Schema_mutationType(ctx, field, obj)

		case "subscriptionType":

			out.Values[i] = ec.___Schema_subscriptionType(ctx, field, obj)

		case "directives":

			out.Values[i] = ec.___Schema_directives(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __TypeImplementors = []string{"__Type"}

func (ec *executionContext) ___Type(ctx context.Context, sel ast.SelectionSet, obj *introspection.Type) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __TypeImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Type")
		case "kind":

			out.Values[i] = ec.___Type_kind(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "name":

			out.Values[i] = ec.___Type_name(ctx, field, obj)

		case "description":

			out.Values[i] = ec.___Type_description(ctx, field, obj)

		case "fields":

			out.Values[i] = ec.___Type_fields(ctx, field, obj)

		case "interfaces":

			out.Values[i] = ec.___Type_interfaces(ctx, field, obj)

		case "possibleTypes":

			out.Values[i] = ec.___Type_possibleTypes(ctx, field, obj)

		case "enumValues":

			out.Values[i] = ec.___Type_enumValues(ctx, field, obj)

		case "inputFields":

			out.Values[i] = ec.___Type_inputFields(ctx, field, obj)

		case "ofType":

			out.Values[i] = ec.___Type_ofType(ctx, field, obj)

		case "specifiedByURL":

			out.Values[i] = ec.___Type_specifiedByURL(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

// endregion **************************** object.gotpl ****************************

// region    ***************************** type.gotpl *****************************

func (ec *executionContext) unmarshalNBoolean2bool(ctx context.Context, v interface{}) (bool, error) {
	res, err := graphql.UnmarshalBoolean(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNBoolean2bool(ctx context.Context, sel ast.SelectionSet, v bool) graphql.Marshaler {
	res := graphql.MarshalBoolean(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNInt2int(ctx context.Context, v interface{}) (int, error) {
	res, err := graphql.UnmarshalInt(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNInt2int(ctx context.Context, sel ast.SelectionSet, v int) graphql.Marshaler {
	res := graphql.MarshalInt(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNMainChatbotConversationInput2IrisAPIsᚋserverᚋgraphᚋmodelᚐMainChatbotConversationInput(ctx context.Context, v interface{}) (model.MainChatbotConversationInput, error) {
	res, err := ec.unmarshalInputMainChatbotConversationInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNMainCurrencyConvertInput2IrisAPIsᚋserverᚋgraphᚋmodelᚐMainCurrencyConvertInput(ctx context.Context, v interface{}) (model.MainCurrencyConvertInput, error) {
	res, err := ec.unmarshalInputMainCurrencyConvertInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNMainIpNationCountriesBulkInput2IrisAPIsᚋserverᚋgraphᚋmodelᚐMainIPNationCountriesBulkInput(ctx context.Context, v interface{}) (model.MainIPNationCountriesBulkInput, error) {
	res, err := ec.unmarshalInputMainIpNationCountriesBulkInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNMainIssueApiKeyPayloadInput2IrisAPIsᚋserverᚋgraphᚋmodelᚐMainIssueAPIKeyPayloadInput(ctx context.Context, v interface{}) (model.MainIssueAPIKeyPayloadInput, error) {
	res, err := ec.unmarshalInputMainIssueApiKeyPayloadInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNMainTransformArticleRequestInput2IrisAPIsᚋserverᚋgraphᚋmodelᚐMainTransformArticleRequestInput(ctx context.Context, v interface{}) (model.MainTransformArticleRequestInput, error) {
	res, err := ec.unmarshalInputMainTransformArticleRequestInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNString2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNString2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) marshalN__Directive2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirective(ctx context.Context, sel ast.SelectionSet, v introspection.Directive) graphql.Marshaler {
	return ec.___Directive(ctx, sel, &v)
}

func (ec *executionContext) marshalN__Directive2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirectiveᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Directive) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Directive2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirective(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalN__DirectiveLocation2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalN__DirectiveLocation2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) unmarshalN__DirectiveLocation2ᚕstringᚄ(ctx context.Context, v interface{}) ([]string, error) {
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]string, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalN__DirectiveLocation2string(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalN__DirectiveLocation2ᚕstringᚄ(ctx context.Context, sel ast.SelectionSet, v []string) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__DirectiveLocation2string(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalN__EnumValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValue(ctx context.Context, sel ast.SelectionSet, v introspection.EnumValue) graphql.Marshaler {
	return ec.___EnumValue(ctx, sel, &v)
}

func (ec *executionContext) marshalN__Field2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐField(ctx context.Context, sel ast.SelectionSet, v introspection.Field) graphql.Marshaler {
	return ec.___Field(ctx, sel, &v)
}

func (ec *executionContext) marshalN__InputValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx context.Context, sel ast.SelectionSet, v introspection.InputValue) graphql.Marshaler {
	return ec.___InputValue(ctx, sel, &v)
}

func (ec *executionContext) marshalN__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.InputValue) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__InputValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalN__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v introspection.Type) graphql.Marshaler {
	return ec.___Type(ctx, sel, &v)
}

func (ec *executionContext) marshalN__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Type) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v *introspection.Type) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec.___Type(ctx, sel, v)
}

func (ec *executionContext) unmarshalN__TypeKind2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalN__TypeKind2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) unmarshalOApiKeyAuthInput2ᚖIrisAPIsᚋserverᚋgraphᚋmodelᚐAPIKeyAuthInput(ctx context.Context, v interface{}) (*model.APIKeyAuthInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputApiKeyAuthInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOBoolean2bool(ctx context.Context, v interface{}) (bool, error) {
	res, err := graphql.UnmarshalBoolean(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOBoolean2bool(ctx context.Context, sel ast.SelectionSet, v bool) graphql.Marshaler {
	res := graphql.MarshalBoolean(v)
	return res
}

func (ec *executionContext) unmarshalOBoolean2ᚖbool(ctx context.Context, v interface{}) (*bool, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalBoolean(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOBoolean2ᚖbool(ctx context.Context, sel ast.SelectionSet, v *bool) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	res := graphql.MarshalBoolean(*v)
	return res
}

func (ec *executionContext) unmarshalOFloat2ᚖfloat64(ctx context.Context, v interface{}) (*float64, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalFloatContext(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOFloat2ᚖfloat64(ctx context.Context, sel ast.SelectionSet, v *float64) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	res := graphql.MarshalFloatContext(*v)
	return graphql.WrapContextMarshaler(ctx, res)
}

func (ec *executionContext) unmarshalOInt2ᚖint(ctx context.Context, v interface{}) (*int, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalInt(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOInt2ᚖint(ctx context.Context, sel ast.SelectionSet, v *int) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	res := graphql.MarshalInt(*v)
	return res
}

func (ec *executionContext) unmarshalOJSON2ᚖstring(ctx context.Context, v interface{}) (*string, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalString(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOJSON2ᚖstring(ctx context.Context, sel ast.SelectionSet, v *string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	res := graphql.MarshalString(*v)
	return res
}

func (ec *executionContext) marshalOMainAccessRecord2ᚕᚖIrisAPIsᚋserverᚋgraphᚋmodelᚐMainAccessRecord(ctx context.Context, sel ast.SelectionSet, v []*model.MainAccessRecord) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOMainAccessRecord2ᚖIrisAPIsᚋserverᚋgraphᚋmodelᚐMainAccessRecord(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOMainAccessRecord2ᚖIrisAPIsᚋserverᚋgraphᚋmodelᚐMainAccessRecord(ctx context.Context, sel ast.SelectionSet, v *model.MainAccessRecord) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._MainAccessRecord(ctx, sel, v)
}

func (ec *executionContext) marshalOMainApiKeyBrief2ᚕᚖIrisAPIsᚋserverᚋgraphᚋmodelᚐMainAPIKeyBrief(ctx context.Context, sel ast.SelectionSet, v []*model.MainAPIKeyBrief) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOMainApiKeyBrief2ᚖIrisAPIsᚋserverᚋgraphᚋmodelᚐMainAPIKeyBrief(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOMainApiKeyBrief2ᚖIrisAPIsᚋserverᚋgraphᚋmodelᚐMainAPIKeyBrief(ctx context.Context, sel ast.SelectionSet, v *model.MainAPIKeyBrief) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._MainApiKeyBrief(ctx, sel, v)
}

func (ec *executionContext) marshalOMainApiKeyDetail2ᚖIrisAPIsᚋserverᚋgraphᚋmodelᚐMainAPIKeyDetail(ctx context.Context, sel ast.SelectionSet, v *model.MainAPIKeyDetail) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._MainApiKeyDetail(ctx, sel, v)
}

func (ec *executionContext) marshalOMainApiKeyUsage2ᚖIrisAPIsᚋserverᚋgraphᚋmodelᚐMainAPIKeyUsage(ctx context.Context, sel ast.SelectionSet, v *model.MainAPIKeyUsage) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._MainApiKeyUsage(ctx, sel, v)
}

func (ec *executionContext) marshalOMainChatbotReactResponse2ᚖIrisAPIsᚋserverᚋgraphᚋmodelᚐMainChatbotReactResponse(ctx context.Context, sel ast.SelectionSet, v *model.MainChatbotReactResponse) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._MainChatbotReactResponse(ctx, sel, v)
}

func (ec *executionContext) marshalOMainChatbotResetUserResponse2ᚖIrisAPIsᚋserverᚋgraphᚋmodelᚐMainChatbotResetUserResponse(ctx context.Context, sel ast.SelectionSet, v *model.MainChatbotResetUserResponse) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._MainChatbotResetUserResponse(ctx, sel, v)
}

func (ec *executionContext) marshalOMainCurrencyConvert2ᚖIrisAPIsᚋserverᚋgraphᚋmodelᚐMainCurrencyConvert(ctx context.Context, sel ast.SelectionSet, v *model.MainCurrencyConvert) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._MainCurrencyConvert(ctx, sel, v)
}

func (ec *executionContext) marshalOMainGenericResultResponse2ᚖIrisAPIsᚋserverᚋgraphᚋmodelᚐMainGenericResultResponse(ctx context.Context, sel ast.SelectionSet, v *model.MainGenericResultResponse) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._MainGenericResultResponse(ctx, sel, v)
}

func (ec *executionContext) marshalOMainGetRecentPBSDataResponse2ᚕᚖIrisAPIsᚋserverᚋgraphᚋmodelᚐMainGetRecentPBSDataResponse(ctx context.Context, sel ast.SelectionSet, v []*model.MainGetRecentPBSDataResponse) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOMainGetRecentPBSDataResponse2ᚖIrisAPIsᚋserverᚋgraphᚋmodelᚐMainGetRecentPBSDataResponse(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOMainGetRecentPBSDataResponse2ᚖIrisAPIsᚋserverᚋgraphᚋmodelᚐMainGetRecentPBSDataResponse(ctx context.Context, sel ast.SelectionSet, v *model.MainGetRecentPBSDataResponse) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._MainGetRecentPBSDataResponse(ctx, sel, v)
}

func (ec *executionContext) marshalOMainGetServiceStatusByIdResponse2ᚕᚖIrisAPIsᚋserverᚋgraphᚋmodelᚐMainGetServiceStatusByIDResponse(ctx context.Context, sel ast.SelectionSet, v []*model.MainGetServiceStatusByIDResponse) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOMainGetServiceStatusByIdResponse2ᚖIrisAPIsᚋserverᚋgraphᚋmodelᚐMainGetServiceStatusByIDResponse(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOMainGetServiceStatusByIdResponse2ᚖIrisAPIsᚋserverᚋgraphᚋmodelᚐMainGetServiceStatusByIDResponse(ctx context.Context, sel ast.SelectionSet, v *model.MainGetServiceStatusByIDResponse) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._MainGetServiceStatusByIdResponse(ctx, sel, v)
}

func (ec *executionContext) marshalOMainIpNationCountriesBulkResponse2ᚖIrisAPIsᚋserverᚋgraphᚋmodelᚐMainIPNationCountriesBulkResponse(ctx context.Context, sel ast.SelectionSet, v *model.MainIPNationCountriesBulkResponse) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._MainIpNationCountriesBulkResponse(ctx, sel, v)
}

func (ec *executionContext) marshalOMainIpNationMyIPResponse2ᚖIrisAPIsᚋserverᚋgraphᚋmodelᚐMainIPNationMyIPResponse(ctx context.Context, sel ast.SelectionSet, v *model.MainIPNationMyIPResponse) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._MainIpNationMyIPResponse(ctx, sel, v)
}

func (ec *executionContext) marshalOMainIssueApiKeyResponse2ᚖIrisAPIsᚋserverᚋgraphᚋmodelᚐMainIssueAPIKeyResponse(ctx context.Context, sel ast.SelectionSet, v *model.MainIssueAPIKeyResponse) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._MainIssueApiKeyResponse(ctx, sel, v)
}

func (ec *executionContext) marshalOMainPingResponse2ᚖIrisAPIsᚋserverᚋgraphᚋmodelᚐMainPingResponse(ctx context.Context, sel ast.SelectionSet, v *model.MainPingResponse) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._MainPingResponse(ctx, sel, v)
}

func (ec *executionContext) marshalOMainSinglePBSEventInfo2ᚕᚖIrisAPIsᚋserverᚋgraphᚋmodelᚐMainSinglePBSEventInfo(ctx context.Context, sel ast.SelectionSet, v []*model.MainSinglePBSEventInfo) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOMainSinglePBSEventInfo2ᚖIrisAPIsᚋserverᚋgraphᚋmodelᚐMainSinglePBSEventInfo(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOMainSinglePBSEventInfo2ᚖIrisAPIsᚋserverᚋgraphᚋmodelᚐMainSinglePBSEventInfo(ctx context.Context, sel ast.SelectionSet, v *model.MainSinglePBSEventInfo) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._MainSinglePBSEventInfo(ctx, sel, v)
}

func (ec *executionContext) marshalOMainTransformArticleResponse2ᚖIrisAPIsᚋserverᚋgraphᚋmodelᚐMainTransformArticleResponse(ctx context.Context, sel ast.SelectionSet, v *model.MainTransformArticleResponse) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._MainTransformArticleResponse(ctx, sel, v)
}

func (ec *executionContext) marshalOMutationViewerAnyAuth2ᚖIrisAPIsᚋserverᚋgraphᚋmodelᚐMutationViewerAnyAuth(ctx context.Context, sel ast.SelectionSet, v *model.MutationViewerAnyAuth) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._MutationViewerAnyAuth(ctx, sel, v)
}

func (ec *executionContext) marshalOMutationViewerApiKey2ᚖIrisAPIsᚋserverᚋgraphᚋmodelᚐMutationViewerAPIKey(ctx context.Context, sel ast.SelectionSet, v *model.MutationViewerAPIKey) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._MutationViewerApiKey(ctx, sel, v)
}

func (ec *executionContext) unmarshalOString2ᚕᚖstring(ctx context.Context, v interface{}) ([]*string, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*string, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOString2ᚖstring(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOString2ᚕᚖstring(ctx context.Context, sel ast.SelectionSet, v []*string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalOString2ᚖstring(ctx, sel, v[i])
	}

	return ret
}

func (ec *executionContext) unmarshalOString2ᚖstring(ctx context.Context, v interface{}) (*string, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalString(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOString2ᚖstring(ctx context.Context, sel ast.SelectionSet, v *string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	res := graphql.MarshalString(*v)
	return res
}

func (ec *executionContext) marshalOViewerAnyAuth2ᚖIrisAPIsᚋserverᚋgraphᚋmodelᚐViewerAnyAuth(ctx context.Context, sel ast.SelectionSet, v *model.ViewerAnyAuth) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ViewerAnyAuth(ctx, sel, v)
}

func (ec *executionContext) marshalOViewerApiKey2ᚖIrisAPIsᚋserverᚋgraphᚋmodelᚐViewerAPIKey(ctx context.Context, sel ast.SelectionSet, v *model.ViewerAPIKey) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ViewerApiKey(ctx, sel, v)
}

func (ec *executionContext) marshalO__EnumValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValueᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.EnumValue) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__EnumValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalO__Field2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐFieldᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Field) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Field2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐField(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalO__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.InputValue) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__InputValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalO__Schema2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐSchema(ctx context.Context, sel ast.SelectionSet, v *introspection.Schema) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec.___Schema(ctx, sel, v)
}

func (ec *executionContext) marshalO__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Type) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v *introspection.Type) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec.___Type(ctx, sel, v)
}

// endregion ***************************** type.gotpl *****************************
