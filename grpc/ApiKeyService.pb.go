// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.15.8
// source: ApiKeyService.proto

package IrisAPIsGRPC

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type PrivilegeLevel int32

const (
	PrivilegeLevel_ApiKeyNotValid     PrivilegeLevel = 0
	PrivilegeLevel_ApiKeyExpired      PrivilegeLevel = 1
	PrivilegeLevel_ApiKeyNotPresented PrivilegeLevel = 2
	PrivilegeLevel_ApiKeyNormal       PrivilegeLevel = 3
	PrivilegeLevel_ApiKeyPrivileged   PrivilegeLevel = 4
)

// Enum value maps for PrivilegeLevel.
var (
	PrivilegeLevel_name = map[int32]string{
		0: "ApiKeyNotValid",
		1: "ApiKeyExpired",
		2: "ApiKeyNotPresented",
		3: "ApiKeyNormal",
		4: "ApiKeyPrivileged",
	}
	PrivilegeLevel_value = map[string]int32{
		"ApiKeyNotValid":     0,
		"ApiKeyExpired":      1,
		"ApiKeyNotPresented": 2,
		"ApiKeyNormal":       3,
		"ApiKeyPrivileged":   4,
	}
)

func (x PrivilegeLevel) Enum() *PrivilegeLevel {
	p := new(PrivilegeLevel)
	*p = x
	return p
}

func (x PrivilegeLevel) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PrivilegeLevel) Descriptor() protoreflect.EnumDescriptor {
	return file_ApiKeyService_proto_enumTypes[0].Descriptor()
}

func (PrivilegeLevel) Type() protoreflect.EnumType {
	return &file_ApiKeyService_proto_enumTypes[0]
}

func (x PrivilegeLevel) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PrivilegeLevel.Descriptor instead.
func (PrivilegeLevel) EnumDescriptor() ([]byte, []int) {
	return file_ApiKeyService_proto_rawDescGZIP(), []int{0}
}

//application string, useInHeader bool, useInQuery bool, issuer string, privileged bool
type IssueApiKeyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Application  string `protobuf:"bytes,1,opt,name=application,proto3" json:"application,omitempty"`
	UseInHandler bool   `protobuf:"varint,2,opt,name=useInHandler,proto3" json:"useInHandler,omitempty"`
	UseInQuery   bool   `protobuf:"varint,3,opt,name=useInQuery,proto3" json:"useInQuery,omitempty"`
	Issuer       string `protobuf:"bytes,4,opt,name=issuer,proto3" json:"issuer,omitempty"`
	Privileged   bool   `protobuf:"varint,5,opt,name=privileged,proto3" json:"privileged,omitempty"`
}

func (x *IssueApiKeyRequest) Reset() {
	*x = IssueApiKeyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ApiKeyService_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IssueApiKeyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IssueApiKeyRequest) ProtoMessage() {}

func (x *IssueApiKeyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ApiKeyService_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IssueApiKeyRequest.ProtoReflect.Descriptor instead.
func (*IssueApiKeyRequest) Descriptor() ([]byte, []int) {
	return file_ApiKeyService_proto_rawDescGZIP(), []int{0}
}

func (x *IssueApiKeyRequest) GetApplication() string {
	if x != nil {
		return x.Application
	}
	return ""
}

func (x *IssueApiKeyRequest) GetUseInHandler() bool {
	if x != nil {
		return x.UseInHandler
	}
	return false
}

func (x *IssueApiKeyRequest) GetUseInQuery() bool {
	if x != nil {
		return x.UseInQuery
	}
	return false
}

func (x *IssueApiKeyRequest) GetIssuer() string {
	if x != nil {
		return x.Issuer
	}
	return ""
}

func (x *IssueApiKeyRequest) GetPrivileged() bool {
	if x != nil {
		return x.Privileged
	}
	return false
}

type IssueApiKeyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ApiKey string `protobuf:"bytes,1,opt,name=ApiKey,proto3" json:"ApiKey,omitempty"`
}

func (x *IssueApiKeyResponse) Reset() {
	*x = IssueApiKeyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ApiKeyService_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IssueApiKeyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IssueApiKeyResponse) ProtoMessage() {}

func (x *IssueApiKeyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ApiKeyService_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IssueApiKeyResponse.ProtoReflect.Descriptor instead.
func (*IssueApiKeyResponse) Descriptor() ([]byte, []int) {
	return file_ApiKeyService_proto_rawDescGZIP(), []int{1}
}

func (x *IssueApiKeyResponse) GetApiKey() string {
	if x != nil {
		return x.ApiKey
	}
	return ""
}

type ValidateApiKeyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key            string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	ApiKeyLocation int64  `protobuf:"varint,2,opt,name=apiKeyLocation,proto3" json:"apiKeyLocation,omitempty"`
}

func (x *ValidateApiKeyRequest) Reset() {
	*x = ValidateApiKeyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ApiKeyService_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ValidateApiKeyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidateApiKeyRequest) ProtoMessage() {}

func (x *ValidateApiKeyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ApiKeyService_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValidateApiKeyRequest.ProtoReflect.Descriptor instead.
func (*ValidateApiKeyRequest) Descriptor() ([]byte, []int) {
	return file_ApiKeyService_proto_rawDescGZIP(), []int{2}
}

func (x *ValidateApiKeyRequest) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *ValidateApiKeyRequest) GetApiKeyLocation() int64 {
	if x != nil {
		return x.ApiKeyLocation
	}
	return 0
}

type ValidateApiKeyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PrivilegeLevel PrivilegeLevel `protobuf:"varint,1,opt,name=privilegeLevel,proto3,enum=IrisAPIsGRPC.PrivilegeLevel" json:"privilegeLevel,omitempty"`
}

func (x *ValidateApiKeyResponse) Reset() {
	*x = ValidateApiKeyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ApiKeyService_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ValidateApiKeyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidateApiKeyResponse) ProtoMessage() {}

func (x *ValidateApiKeyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ApiKeyService_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValidateApiKeyResponse.ProtoReflect.Descriptor instead.
func (*ValidateApiKeyResponse) Descriptor() ([]byte, []int) {
	return file_ApiKeyService_proto_rawDescGZIP(), []int{3}
}

func (x *ValidateApiKeyResponse) GetPrivilegeLevel() PrivilegeLevel {
	if x != nil {
		return x.PrivilegeLevel
	}
	return PrivilegeLevel_ApiKeyNotValid
}

type ApiKeyDetail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          int64                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Key         string                 `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty"`
	UseInHeader bool                   `protobuf:"varint,3,opt,name=useInHeader,proto3" json:"useInHeader,omitempty"`
	UseInQuery  bool                   `protobuf:"varint,4,opt,name=useInQuery,proto3" json:"useInQuery,omitempty"`
	Application string                 `protobuf:"bytes,5,opt,name=Application,proto3" json:"Application,omitempty"`
	Issuer      string                 `protobuf:"bytes,6,opt,name=Issuer,proto3" json:"Issuer,omitempty"`
	IssueDate   int64                  `protobuf:"varint,7,opt,name=issueDate,proto3" json:"issueDate,omitempty"`
	Privileged  bool                   `protobuf:"varint,8,opt,name=Privileged,proto3" json:"Privileged,omitempty"`
	Expiration  *wrapperspb.Int64Value `protobuf:"bytes,9,opt,name=expiration,proto3" json:"expiration,omitempty"` //Explicit Optional
}

func (x *ApiKeyDetail) Reset() {
	*x = ApiKeyDetail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ApiKeyService_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApiKeyDetail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApiKeyDetail) ProtoMessage() {}

func (x *ApiKeyDetail) ProtoReflect() protoreflect.Message {
	mi := &file_ApiKeyService_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApiKeyDetail.ProtoReflect.Descriptor instead.
func (*ApiKeyDetail) Descriptor() ([]byte, []int) {
	return file_ApiKeyService_proto_rawDescGZIP(), []int{4}
}

func (x *ApiKeyDetail) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ApiKeyDetail) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *ApiKeyDetail) GetUseInHeader() bool {
	if x != nil {
		return x.UseInHeader
	}
	return false
}

func (x *ApiKeyDetail) GetUseInQuery() bool {
	if x != nil {
		return x.UseInQuery
	}
	return false
}

func (x *ApiKeyDetail) GetApplication() string {
	if x != nil {
		return x.Application
	}
	return ""
}

func (x *ApiKeyDetail) GetIssuer() string {
	if x != nil {
		return x.Issuer
	}
	return ""
}

func (x *ApiKeyDetail) GetIssueDate() int64 {
	if x != nil {
		return x.IssueDate
	}
	return 0
}

func (x *ApiKeyDetail) GetPrivileged() bool {
	if x != nil {
		return x.Privileged
	}
	return false
}

func (x *ApiKeyDetail) GetExpiration() *wrapperspb.Int64Value {
	if x != nil {
		return x.Expiration
	}
	return nil
}

type ApiKeyAccess struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	ApiKeyRef int64  `protobuf:"varint,2,opt,name=apiKeyRef,proto3" json:"apiKeyRef,omitempty"`
	FullPath  string `protobuf:"bytes,3,opt,name=fullPath,proto3" json:"fullPath,omitempty"`
	Method    string `protobuf:"bytes,4,opt,name=method,proto3" json:"method,omitempty"`
	Ip        string `protobuf:"bytes,5,opt,name=ip,proto3" json:"ip,omitempty"`
	Nation    string `protobuf:"bytes,6,opt,name=nation,proto3" json:"nation,omitempty"`
	Timestamp int64  `protobuf:"varint,7,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
}

func (x *ApiKeyAccess) Reset() {
	*x = ApiKeyAccess{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ApiKeyService_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApiKeyAccess) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApiKeyAccess) ProtoMessage() {}

func (x *ApiKeyAccess) ProtoReflect() protoreflect.Message {
	mi := &file_ApiKeyService_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApiKeyAccess.ProtoReflect.Descriptor instead.
func (*ApiKeyAccess) Descriptor() ([]byte, []int) {
	return file_ApiKeyService_proto_rawDescGZIP(), []int{5}
}

func (x *ApiKeyAccess) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ApiKeyAccess) GetApiKeyRef() int64 {
	if x != nil {
		return x.ApiKeyRef
	}
	return 0
}

func (x *ApiKeyAccess) GetFullPath() string {
	if x != nil {
		return x.FullPath
	}
	return ""
}

func (x *ApiKeyAccess) GetMethod() string {
	if x != nil {
		return x.Method
	}
	return ""
}

func (x *ApiKeyAccess) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

func (x *ApiKeyAccess) GetNation() string {
	if x != nil {
		return x.Nation
	}
	return ""
}

func (x *ApiKeyAccess) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

type GetAllKeysRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetAllKeysRequest) Reset() {
	*x = GetAllKeysRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ApiKeyService_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAllKeysRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAllKeysRequest) ProtoMessage() {}

func (x *GetAllKeysRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ApiKeyService_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAllKeysRequest.ProtoReflect.Descriptor instead.
func (*GetAllKeysRequest) Descriptor() ([]byte, []int) {
	return file_ApiKeyService_proto_rawDescGZIP(), []int{6}
}

type GetAllKeysResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Entries []*ApiKeyDetail `protobuf:"bytes,1,rep,name=entries,proto3" json:"entries,omitempty"`
}

func (x *GetAllKeysResponse) Reset() {
	*x = GetAllKeysResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ApiKeyService_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAllKeysResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAllKeysResponse) ProtoMessage() {}

func (x *GetAllKeysResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ApiKeyService_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAllKeysResponse.ProtoReflect.Descriptor instead.
func (*GetAllKeysResponse) Descriptor() ([]byte, []int) {
	return file_ApiKeyService_proto_rawDescGZIP(), []int{7}
}

func (x *GetAllKeysResponse) GetEntries() []*ApiKeyDetail {
	if x != nil {
		return x.Entries
	}
	return nil
}

type GetKeyByIdRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetKeyByIdRequest) Reset() {
	*x = GetKeyByIdRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ApiKeyService_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetKeyByIdRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetKeyByIdRequest) ProtoMessage() {}

func (x *GetKeyByIdRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ApiKeyService_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetKeyByIdRequest.ProtoReflect.Descriptor instead.
func (*GetKeyByIdRequest) Descriptor() ([]byte, []int) {
	return file_ApiKeyService_proto_rawDescGZIP(), []int{8}
}

func (x *GetKeyByIdRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type GetKeyByIdResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Entry *ApiKeyDetail `protobuf:"bytes,1,opt,name=entry,proto3" json:"entry,omitempty"`
}

func (x *GetKeyByIdResponse) Reset() {
	*x = GetKeyByIdResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ApiKeyService_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetKeyByIdResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetKeyByIdResponse) ProtoMessage() {}

func (x *GetKeyByIdResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ApiKeyService_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetKeyByIdResponse.ProtoReflect.Descriptor instead.
func (*GetKeyByIdResponse) Descriptor() ([]byte, []int) {
	return file_ApiKeyService_proto_rawDescGZIP(), []int{9}
}

func (x *GetKeyByIdResponse) GetEntry() *ApiKeyDetail {
	if x != nil {
		return x.Entry
	}
	return nil
}

type SetExpiredRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	IsExpired bool  `protobuf:"varint,2,opt,name=isExpired,proto3" json:"isExpired,omitempty"`
}

func (x *SetExpiredRequest) Reset() {
	*x = SetExpiredRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ApiKeyService_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetExpiredRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetExpiredRequest) ProtoMessage() {}

func (x *SetExpiredRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ApiKeyService_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetExpiredRequest.ProtoReflect.Descriptor instead.
func (*SetExpiredRequest) Descriptor() ([]byte, []int) {
	return file_ApiKeyService_proto_rawDescGZIP(), []int{10}
}

func (x *SetExpiredRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *SetExpiredRequest) GetIsExpired() bool {
	if x != nil {
		return x.IsExpired
	}
	return false
}

type SetExpiredResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SetExpiredResponse) Reset() {
	*x = SetExpiredResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ApiKeyService_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetExpiredResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetExpiredResponse) ProtoMessage() {}

func (x *SetExpiredResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ApiKeyService_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetExpiredResponse.ProtoReflect.Descriptor instead.
func (*SetExpiredResponse) Descriptor() ([]byte, []int) {
	return file_ApiKeyService_proto_rawDescGZIP(), []int{11}
}

type GetKeyUsageByIdRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id   int64                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	From *wrapperspb.Int64Value `protobuf:"bytes,2,opt,name=from,proto3" json:"from,omitempty"`
	To   *wrapperspb.Int64Value `protobuf:"bytes,3,opt,name=to,proto3" json:"to,omitempty"`
}

func (x *GetKeyUsageByIdRequest) Reset() {
	*x = GetKeyUsageByIdRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ApiKeyService_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetKeyUsageByIdRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetKeyUsageByIdRequest) ProtoMessage() {}

func (x *GetKeyUsageByIdRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ApiKeyService_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetKeyUsageByIdRequest.ProtoReflect.Descriptor instead.
func (*GetKeyUsageByIdRequest) Descriptor() ([]byte, []int) {
	return file_ApiKeyService_proto_rawDescGZIP(), []int{12}
}

func (x *GetKeyUsageByIdRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *GetKeyUsageByIdRequest) GetFrom() *wrapperspb.Int64Value {
	if x != nil {
		return x.From
	}
	return nil
}

func (x *GetKeyUsageByIdRequest) GetTo() *wrapperspb.Int64Value {
	if x != nil {
		return x.To
	}
	return nil
}

type GetKeyUsageByIdResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Entries []*ApiKeyAccess `protobuf:"bytes,1,rep,name=entries,proto3" json:"entries,omitempty"`
}

func (x *GetKeyUsageByIdResponse) Reset() {
	*x = GetKeyUsageByIdResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ApiKeyService_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetKeyUsageByIdResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetKeyUsageByIdResponse) ProtoMessage() {}

func (x *GetKeyUsageByIdResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ApiKeyService_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetKeyUsageByIdResponse.ProtoReflect.Descriptor instead.
func (*GetKeyUsageByIdResponse) Descriptor() ([]byte, []int) {
	return file_ApiKeyService_proto_rawDescGZIP(), []int{13}
}

func (x *GetKeyUsageByIdResponse) GetEntries() []*ApiKeyAccess {
	if x != nil {
		return x.Entries
	}
	return nil
}

type GetKeyUsageByPathRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Path       string                 `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
	ExactMatch bool                   `protobuf:"varint,2,opt,name=exactMatch,proto3" json:"exactMatch,omitempty"`
	From       *wrapperspb.Int64Value `protobuf:"bytes,3,opt,name=from,proto3" json:"from,omitempty"`
	To         *wrapperspb.Int64Value `protobuf:"bytes,4,opt,name=to,proto3" json:"to,omitempty"`
}

func (x *GetKeyUsageByPathRequest) Reset() {
	*x = GetKeyUsageByPathRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ApiKeyService_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetKeyUsageByPathRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetKeyUsageByPathRequest) ProtoMessage() {}

func (x *GetKeyUsageByPathRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ApiKeyService_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetKeyUsageByPathRequest.ProtoReflect.Descriptor instead.
func (*GetKeyUsageByPathRequest) Descriptor() ([]byte, []int) {
	return file_ApiKeyService_proto_rawDescGZIP(), []int{14}
}

func (x *GetKeyUsageByPathRequest) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *GetKeyUsageByPathRequest) GetExactMatch() bool {
	if x != nil {
		return x.ExactMatch
	}
	return false
}

func (x *GetKeyUsageByPathRequest) GetFrom() *wrapperspb.Int64Value {
	if x != nil {
		return x.From
	}
	return nil
}

func (x *GetKeyUsageByPathRequest) GetTo() *wrapperspb.Int64Value {
	if x != nil {
		return x.To
	}
	return nil
}

type GetKeyUsageByPathResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Entries []*ApiKeyAccess `protobuf:"bytes,1,rep,name=entries,proto3" json:"entries,omitempty"`
}

func (x *GetKeyUsageByPathResponse) Reset() {
	*x = GetKeyUsageByPathResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ApiKeyService_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetKeyUsageByPathResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetKeyUsageByPathResponse) ProtoMessage() {}

func (x *GetKeyUsageByPathResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ApiKeyService_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetKeyUsageByPathResponse.ProtoReflect.Descriptor instead.
func (*GetKeyUsageByPathResponse) Descriptor() ([]byte, []int) {
	return file_ApiKeyService_proto_rawDescGZIP(), []int{15}
}

func (x *GetKeyUsageByPathResponse) GetEntries() []*ApiKeyAccess {
	if x != nil {
		return x.Entries
	}
	return nil
}

var File_ApiKeyService_proto protoreflect.FileDescriptor

var file_ApiKeyService_proto_rawDesc = []byte{
	0x0a, 0x13, 0x41, 0x70, 0x69, 0x4b, 0x65, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0c, 0x49, 0x72, 0x69, 0x73, 0x41, 0x50, 0x49, 0x73, 0x47,
	0x52, 0x50, 0x43, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x22, 0xb2, 0x01, 0x0a, 0x12, 0x49, 0x73, 0x73, 0x75, 0x65, 0x41, 0x70, 0x69,
	0x4b, 0x65, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x61, 0x70,
	0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x22, 0x0a, 0x0c,
	0x75, 0x73, 0x65, 0x49, 0x6e, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0c, 0x75, 0x73, 0x65, 0x49, 0x6e, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x72,
	0x12, 0x1e, 0x0a, 0x0a, 0x75, 0x73, 0x65, 0x49, 0x6e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x75, 0x73, 0x65, 0x49, 0x6e, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x12, 0x16, 0x0a, 0x06, 0x69, 0x73, 0x73, 0x75, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x69, 0x73, 0x73, 0x75, 0x65, 0x72, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x72, 0x69, 0x76,
	0x69, 0x6c, 0x65, 0x67, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x70, 0x72,
	0x69, 0x76, 0x69, 0x6c, 0x65, 0x67, 0x65, 0x64, 0x22, 0x2d, 0x0a, 0x13, 0x49, 0x73, 0x73, 0x75,
	0x65, 0x41, 0x70, 0x69, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x41, 0x70, 0x69, 0x4b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x41, 0x70, 0x69, 0x4b, 0x65, 0x79, 0x22, 0x51, 0x0a, 0x15, 0x56, 0x61, 0x6c, 0x69, 0x64,
	0x61, 0x74, 0x65, 0x41, 0x70, 0x69, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x26, 0x0a, 0x0e, 0x61, 0x70, 0x69, 0x4b, 0x65, 0x79, 0x4c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x61, 0x70, 0x69, 0x4b,
	0x65, 0x79, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x5e, 0x0a, 0x16, 0x56, 0x61,
	0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x41, 0x70, 0x69, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x44, 0x0a, 0x0e, 0x70, 0x72, 0x69, 0x76, 0x69, 0x6c, 0x65, 0x67,
	0x65, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x49,
	0x72, 0x69, 0x73, 0x41, 0x50, 0x49, 0x73, 0x47, 0x52, 0x50, 0x43, 0x2e, 0x50, 0x72, 0x69, 0x76,
	0x69, 0x6c, 0x65, 0x67, 0x65, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x52, 0x0e, 0x70, 0x72, 0x69, 0x76,
	0x69, 0x6c, 0x65, 0x67, 0x65, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x22, 0xa7, 0x02, 0x0a, 0x0c, 0x41,
	0x70, 0x69, 0x4b, 0x65, 0x79, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x20, 0x0a,
	0x0b, 0x75, 0x73, 0x65, 0x49, 0x6e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0b, 0x75, 0x73, 0x65, 0x49, 0x6e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12,
	0x1e, 0x0a, 0x0a, 0x75, 0x73, 0x65, 0x49, 0x6e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0a, 0x75, 0x73, 0x65, 0x49, 0x6e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12,
	0x20, 0x0a, 0x0b, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x16, 0x0a, 0x06, 0x49, 0x73, 0x73, 0x75, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x49, 0x73, 0x73, 0x75, 0x65, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x73, 0x73,
	0x75, 0x65, 0x44, 0x61, 0x74, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x69, 0x73,
	0x73, 0x75, 0x65, 0x44, 0x61, 0x74, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x50, 0x72, 0x69, 0x76, 0x69,
	0x6c, 0x65, 0x67, 0x65, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x50, 0x72, 0x69,
	0x76, 0x69, 0x6c, 0x65, 0x67, 0x65, 0x64, 0x12, 0x3b, 0x0a, 0x0a, 0x65, 0x78, 0x70, 0x69, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e,
	0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0a, 0x65, 0x78, 0x70, 0x69, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x22, 0xb6, 0x01, 0x0a, 0x0c, 0x41, 0x70, 0x69, 0x4b, 0x65, 0x79, 0x41,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x70, 0x69, 0x4b, 0x65, 0x79, 0x52,
	0x65, 0x66, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x61, 0x70, 0x69, 0x4b, 0x65, 0x79,
	0x52, 0x65, 0x66, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x75, 0x6c, 0x6c, 0x50, 0x61, 0x74, 0x68, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x75, 0x6c, 0x6c, 0x50, 0x61, 0x74, 0x68, 0x12,
	0x16, 0x0a, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x70, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x6e, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x22, 0x13, 0x0a,
	0x11, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x4b, 0x65, 0x79, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x22, 0x4a, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x4b, 0x65, 0x79, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x34, 0x0a, 0x07, 0x65, 0x6e, 0x74, 0x72,
	0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x49, 0x72, 0x69, 0x73,
	0x41, 0x50, 0x49, 0x73, 0x47, 0x52, 0x50, 0x43, 0x2e, 0x41, 0x70, 0x69, 0x4b, 0x65, 0x79, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x07, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x22, 0x23,
	0x0a, 0x11, 0x47, 0x65, 0x74, 0x4b, 0x65, 0x79, 0x42, 0x79, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x02, 0x69, 0x64, 0x22, 0x46, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x4b, 0x65, 0x79, 0x42, 0x79, 0x49,
	0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x30, 0x0a, 0x05, 0x65, 0x6e, 0x74,
	0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x49, 0x72, 0x69, 0x73, 0x41,
	0x50, 0x49, 0x73, 0x47, 0x52, 0x50, 0x43, 0x2e, 0x41, 0x70, 0x69, 0x4b, 0x65, 0x79, 0x44, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x52, 0x05, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x22, 0x41, 0x0a, 0x11, 0x53,
	0x65, 0x74, 0x45, 0x78, 0x70, 0x69, 0x72, 0x65, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x1c, 0x0a, 0x09, 0x69, 0x73, 0x45, 0x78, 0x70, 0x69, 0x72, 0x65, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x45, 0x78, 0x70, 0x69, 0x72, 0x65, 0x64, 0x22, 0x14,
	0x0a, 0x12, 0x53, 0x65, 0x74, 0x45, 0x78, 0x70, 0x69, 0x72, 0x65, 0x64, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x86, 0x01, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x4b, 0x65, 0x79, 0x55,
	0x73, 0x61, 0x67, 0x65, 0x42, 0x79, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x2f, 0x0a, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x66, 0x72, 0x6f, 0x6d,
	0x12, 0x2b, 0x0a, 0x02, 0x74, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49,
	0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x02, 0x74, 0x6f, 0x22, 0x4f, 0x0a,
	0x17, 0x47, 0x65, 0x74, 0x4b, 0x65, 0x79, 0x55, 0x73, 0x61, 0x67, 0x65, 0x42, 0x79, 0x49, 0x64,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x34, 0x0a, 0x07, 0x65, 0x6e, 0x74, 0x72,
	0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x49, 0x72, 0x69, 0x73,
	0x41, 0x50, 0x49, 0x73, 0x47, 0x52, 0x50, 0x43, 0x2e, 0x41, 0x70, 0x69, 0x4b, 0x65, 0x79, 0x41,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x52, 0x07, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x22, 0xac,
	0x01, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x4b, 0x65, 0x79, 0x55, 0x73, 0x61, 0x67, 0x65, 0x42, 0x79,
	0x50, 0x61, 0x74, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x70,
	0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12,
	0x1e, 0x0a, 0x0a, 0x65, 0x78, 0x61, 0x63, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0a, 0x65, 0x78, 0x61, 0x63, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x12,
	0x2f, 0x0a, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x66, 0x72, 0x6f, 0x6d,
	0x12, 0x2b, 0x0a, 0x02, 0x74, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49,
	0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x02, 0x74, 0x6f, 0x22, 0x51, 0x0a,
	0x19, 0x47, 0x65, 0x74, 0x4b, 0x65, 0x79, 0x55, 0x73, 0x61, 0x67, 0x65, 0x42, 0x79, 0x50, 0x61,
	0x74, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x34, 0x0a, 0x07, 0x65, 0x6e,
	0x74, 0x72, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x49, 0x72,
	0x69, 0x73, 0x41, 0x50, 0x49, 0x73, 0x47, 0x52, 0x50, 0x43, 0x2e, 0x41, 0x70, 0x69, 0x4b, 0x65,
	0x79, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x52, 0x07, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73,
	0x2a, 0x77, 0x0a, 0x0e, 0x50, 0x72, 0x69, 0x76, 0x69, 0x6c, 0x65, 0x67, 0x65, 0x4c, 0x65, 0x76,
	0x65, 0x6c, 0x12, 0x12, 0x0a, 0x0e, 0x41, 0x70, 0x69, 0x4b, 0x65, 0x79, 0x4e, 0x6f, 0x74, 0x56,
	0x61, 0x6c, 0x69, 0x64, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d, 0x41, 0x70, 0x69, 0x4b, 0x65, 0x79,
	0x45, 0x78, 0x70, 0x69, 0x72, 0x65, 0x64, 0x10, 0x01, 0x12, 0x16, 0x0a, 0x12, 0x41, 0x70, 0x69,
	0x4b, 0x65, 0x79, 0x4e, 0x6f, 0x74, 0x50, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x65, 0x64, 0x10,
	0x02, 0x12, 0x10, 0x0a, 0x0c, 0x41, 0x70, 0x69, 0x4b, 0x65, 0x79, 0x4e, 0x6f, 0x72, 0x6d, 0x61,
	0x6c, 0x10, 0x03, 0x12, 0x14, 0x0a, 0x10, 0x41, 0x70, 0x69, 0x4b, 0x65, 0x79, 0x50, 0x72, 0x69,
	0x76, 0x69, 0x6c, 0x65, 0x67, 0x65, 0x64, 0x10, 0x04, 0x32, 0x87, 0x05, 0x0a, 0x0d, 0x41, 0x70,
	0x69, 0x4b, 0x65, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x54, 0x0a, 0x0b, 0x49,
	0x73, 0x73, 0x75, 0x65, 0x41, 0x70, 0x69, 0x4b, 0x65, 0x79, 0x12, 0x20, 0x2e, 0x49, 0x72, 0x69,
	0x73, 0x41, 0x50, 0x49, 0x73, 0x47, 0x52, 0x50, 0x43, 0x2e, 0x49, 0x73, 0x73, 0x75, 0x65, 0x41,
	0x70, 0x69, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x49,
	0x72, 0x69, 0x73, 0x41, 0x50, 0x49, 0x73, 0x47, 0x52, 0x50, 0x43, 0x2e, 0x49, 0x73, 0x73, 0x75,
	0x65, 0x41, 0x70, 0x69, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x5d, 0x0a, 0x0e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x41, 0x70, 0x69,
	0x4b, 0x65, 0x79, 0x12, 0x23, 0x2e, 0x49, 0x72, 0x69, 0x73, 0x41, 0x50, 0x49, 0x73, 0x47, 0x52,
	0x50, 0x43, 0x2e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x41, 0x70, 0x69, 0x4b, 0x65,
	0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x49, 0x72, 0x69, 0x73, 0x41,
	0x50, 0x49, 0x73, 0x47, 0x52, 0x50, 0x43, 0x2e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65,
	0x41, 0x70, 0x69, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x51, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x4b, 0x65, 0x79, 0x73, 0x12, 0x1f,
	0x2e, 0x49, 0x72, 0x69, 0x73, 0x41, 0x50, 0x49, 0x73, 0x47, 0x52, 0x50, 0x43, 0x2e, 0x47, 0x65,
	0x74, 0x41, 0x6c, 0x6c, 0x4b, 0x65, 0x79, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x20, 0x2e, 0x49, 0x72, 0x69, 0x73, 0x41, 0x50, 0x49, 0x73, 0x47, 0x52, 0x50, 0x43, 0x2e, 0x47,
	0x65, 0x74, 0x41, 0x6c, 0x6c, 0x4b, 0x65, 0x79, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x51, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x4b, 0x65, 0x79, 0x42, 0x79, 0x49,
	0x64, 0x12, 0x1f, 0x2e, 0x49, 0x72, 0x69, 0x73, 0x41, 0x50, 0x49, 0x73, 0x47, 0x52, 0x50, 0x43,
	0x2e, 0x47, 0x65, 0x74, 0x4b, 0x65, 0x79, 0x42, 0x79, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x20, 0x2e, 0x49, 0x72, 0x69, 0x73, 0x41, 0x50, 0x49, 0x73, 0x47, 0x52, 0x50,
	0x43, 0x2e, 0x47, 0x65, 0x74, 0x4b, 0x65, 0x79, 0x42, 0x79, 0x49, 0x64, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x51, 0x0a, 0x0a, 0x53, 0x65, 0x74, 0x45, 0x78, 0x70,
	0x69, 0x72, 0x65, 0x64, 0x12, 0x1f, 0x2e, 0x49, 0x72, 0x69, 0x73, 0x41, 0x50, 0x49, 0x73, 0x47,
	0x52, 0x50, 0x43, 0x2e, 0x53, 0x65, 0x74, 0x45, 0x78, 0x70, 0x69, 0x72, 0x65, 0x64, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x49, 0x72, 0x69, 0x73, 0x41, 0x50, 0x49, 0x73,
	0x47, 0x52, 0x50, 0x43, 0x2e, 0x53, 0x65, 0x74, 0x45, 0x78, 0x70, 0x69, 0x72, 0x65, 0x64, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x60, 0x0a, 0x0f, 0x47, 0x65, 0x74,
	0x4b, 0x65, 0x79, 0x55, 0x73, 0x61, 0x67, 0x65, 0x42, 0x79, 0x49, 0x64, 0x12, 0x24, 0x2e, 0x49,
	0x72, 0x69, 0x73, 0x41, 0x50, 0x49, 0x73, 0x47, 0x52, 0x50, 0x43, 0x2e, 0x47, 0x65, 0x74, 0x4b,
	0x65, 0x79, 0x55, 0x73, 0x61, 0x67, 0x65, 0x42, 0x79, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x25, 0x2e, 0x49, 0x72, 0x69, 0x73, 0x41, 0x50, 0x49, 0x73, 0x47, 0x52, 0x50,
	0x43, 0x2e, 0x47, 0x65, 0x74, 0x4b, 0x65, 0x79, 0x55, 0x73, 0x61, 0x67, 0x65, 0x42, 0x79, 0x49,
	0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x66, 0x0a, 0x11, 0x47,
	0x65, 0x74, 0x4b, 0x65, 0x79, 0x55, 0x73, 0x61, 0x67, 0x65, 0x42, 0x79, 0x50, 0x61, 0x74, 0x68,
	0x12, 0x26, 0x2e, 0x49, 0x72, 0x69, 0x73, 0x41, 0x50, 0x49, 0x73, 0x47, 0x52, 0x50, 0x43, 0x2e,
	0x47, 0x65, 0x74, 0x4b, 0x65, 0x79, 0x55, 0x73, 0x61, 0x67, 0x65, 0x42, 0x79, 0x50, 0x61, 0x74,
	0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x49, 0x72, 0x69, 0x73, 0x41,
	0x50, 0x49, 0x73, 0x47, 0x52, 0x50, 0x43, 0x2e, 0x47, 0x65, 0x74, 0x4b, 0x65, 0x79, 0x55, 0x73,
	0x61, 0x67, 0x65, 0x42, 0x79, 0x50, 0x61, 0x74, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_ApiKeyService_proto_rawDescOnce sync.Once
	file_ApiKeyService_proto_rawDescData = file_ApiKeyService_proto_rawDesc
)

func file_ApiKeyService_proto_rawDescGZIP() []byte {
	file_ApiKeyService_proto_rawDescOnce.Do(func() {
		file_ApiKeyService_proto_rawDescData = protoimpl.X.CompressGZIP(file_ApiKeyService_proto_rawDescData)
	})
	return file_ApiKeyService_proto_rawDescData
}

var file_ApiKeyService_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_ApiKeyService_proto_msgTypes = make([]protoimpl.MessageInfo, 16)
var file_ApiKeyService_proto_goTypes = []interface{}{
	(PrivilegeLevel)(0),               // 0: IrisAPIsGRPC.PrivilegeLevel
	(*IssueApiKeyRequest)(nil),        // 1: IrisAPIsGRPC.IssueApiKeyRequest
	(*IssueApiKeyResponse)(nil),       // 2: IrisAPIsGRPC.IssueApiKeyResponse
	(*ValidateApiKeyRequest)(nil),     // 3: IrisAPIsGRPC.ValidateApiKeyRequest
	(*ValidateApiKeyResponse)(nil),    // 4: IrisAPIsGRPC.ValidateApiKeyResponse
	(*ApiKeyDetail)(nil),              // 5: IrisAPIsGRPC.ApiKeyDetail
	(*ApiKeyAccess)(nil),              // 6: IrisAPIsGRPC.ApiKeyAccess
	(*GetAllKeysRequest)(nil),         // 7: IrisAPIsGRPC.GetAllKeysRequest
	(*GetAllKeysResponse)(nil),        // 8: IrisAPIsGRPC.GetAllKeysResponse
	(*GetKeyByIdRequest)(nil),         // 9: IrisAPIsGRPC.GetKeyByIdRequest
	(*GetKeyByIdResponse)(nil),        // 10: IrisAPIsGRPC.GetKeyByIdResponse
	(*SetExpiredRequest)(nil),         // 11: IrisAPIsGRPC.SetExpiredRequest
	(*SetExpiredResponse)(nil),        // 12: IrisAPIsGRPC.SetExpiredResponse
	(*GetKeyUsageByIdRequest)(nil),    // 13: IrisAPIsGRPC.GetKeyUsageByIdRequest
	(*GetKeyUsageByIdResponse)(nil),   // 14: IrisAPIsGRPC.GetKeyUsageByIdResponse
	(*GetKeyUsageByPathRequest)(nil),  // 15: IrisAPIsGRPC.GetKeyUsageByPathRequest
	(*GetKeyUsageByPathResponse)(nil), // 16: IrisAPIsGRPC.GetKeyUsageByPathResponse
	(*wrapperspb.Int64Value)(nil),     // 17: google.protobuf.Int64Value
}
var file_ApiKeyService_proto_depIdxs = []int32{
	0,  // 0: IrisAPIsGRPC.ValidateApiKeyResponse.privilegeLevel:type_name -> IrisAPIsGRPC.PrivilegeLevel
	17, // 1: IrisAPIsGRPC.ApiKeyDetail.expiration:type_name -> google.protobuf.Int64Value
	5,  // 2: IrisAPIsGRPC.GetAllKeysResponse.entries:type_name -> IrisAPIsGRPC.ApiKeyDetail
	5,  // 3: IrisAPIsGRPC.GetKeyByIdResponse.entry:type_name -> IrisAPIsGRPC.ApiKeyDetail
	17, // 4: IrisAPIsGRPC.GetKeyUsageByIdRequest.from:type_name -> google.protobuf.Int64Value
	17, // 5: IrisAPIsGRPC.GetKeyUsageByIdRequest.to:type_name -> google.protobuf.Int64Value
	6,  // 6: IrisAPIsGRPC.GetKeyUsageByIdResponse.entries:type_name -> IrisAPIsGRPC.ApiKeyAccess
	17, // 7: IrisAPIsGRPC.GetKeyUsageByPathRequest.from:type_name -> google.protobuf.Int64Value
	17, // 8: IrisAPIsGRPC.GetKeyUsageByPathRequest.to:type_name -> google.protobuf.Int64Value
	6,  // 9: IrisAPIsGRPC.GetKeyUsageByPathResponse.entries:type_name -> IrisAPIsGRPC.ApiKeyAccess
	1,  // 10: IrisAPIsGRPC.ApiKeyService.IssueApiKey:input_type -> IrisAPIsGRPC.IssueApiKeyRequest
	3,  // 11: IrisAPIsGRPC.ApiKeyService.ValidateApiKey:input_type -> IrisAPIsGRPC.ValidateApiKeyRequest
	7,  // 12: IrisAPIsGRPC.ApiKeyService.GetAllKeys:input_type -> IrisAPIsGRPC.GetAllKeysRequest
	9,  // 13: IrisAPIsGRPC.ApiKeyService.GetKeyById:input_type -> IrisAPIsGRPC.GetKeyByIdRequest
	11, // 14: IrisAPIsGRPC.ApiKeyService.SetExpired:input_type -> IrisAPIsGRPC.SetExpiredRequest
	13, // 15: IrisAPIsGRPC.ApiKeyService.GetKeyUsageById:input_type -> IrisAPIsGRPC.GetKeyUsageByIdRequest
	15, // 16: IrisAPIsGRPC.ApiKeyService.GetKeyUsageByPath:input_type -> IrisAPIsGRPC.GetKeyUsageByPathRequest
	2,  // 17: IrisAPIsGRPC.ApiKeyService.IssueApiKey:output_type -> IrisAPIsGRPC.IssueApiKeyResponse
	4,  // 18: IrisAPIsGRPC.ApiKeyService.ValidateApiKey:output_type -> IrisAPIsGRPC.ValidateApiKeyResponse
	8,  // 19: IrisAPIsGRPC.ApiKeyService.GetAllKeys:output_type -> IrisAPIsGRPC.GetAllKeysResponse
	10, // 20: IrisAPIsGRPC.ApiKeyService.GetKeyById:output_type -> IrisAPIsGRPC.GetKeyByIdResponse
	12, // 21: IrisAPIsGRPC.ApiKeyService.SetExpired:output_type -> IrisAPIsGRPC.SetExpiredResponse
	14, // 22: IrisAPIsGRPC.ApiKeyService.GetKeyUsageById:output_type -> IrisAPIsGRPC.GetKeyUsageByIdResponse
	16, // 23: IrisAPIsGRPC.ApiKeyService.GetKeyUsageByPath:output_type -> IrisAPIsGRPC.GetKeyUsageByPathResponse
	17, // [17:24] is the sub-list for method output_type
	10, // [10:17] is the sub-list for method input_type
	10, // [10:10] is the sub-list for extension type_name
	10, // [10:10] is the sub-list for extension extendee
	0,  // [0:10] is the sub-list for field type_name
}

func init() { file_ApiKeyService_proto_init() }
func file_ApiKeyService_proto_init() {
	if File_ApiKeyService_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_ApiKeyService_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IssueApiKeyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ApiKeyService_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IssueApiKeyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ApiKeyService_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ValidateApiKeyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ApiKeyService_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ValidateApiKeyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ApiKeyService_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApiKeyDetail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ApiKeyService_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApiKeyAccess); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ApiKeyService_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAllKeysRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ApiKeyService_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAllKeysResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ApiKeyService_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetKeyByIdRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ApiKeyService_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetKeyByIdResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ApiKeyService_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetExpiredRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ApiKeyService_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetExpiredResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ApiKeyService_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetKeyUsageByIdRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ApiKeyService_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetKeyUsageByIdResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ApiKeyService_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetKeyUsageByPathRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ApiKeyService_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetKeyUsageByPathResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_ApiKeyService_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   16,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_ApiKeyService_proto_goTypes,
		DependencyIndexes: file_ApiKeyService_proto_depIdxs,
		EnumInfos:         file_ApiKeyService_proto_enumTypes,
		MessageInfos:      file_ApiKeyService_proto_msgTypes,
	}.Build()
	File_ApiKeyService_proto = out.File
	file_ApiKeyService_proto_rawDesc = nil
	file_ApiKeyService_proto_goTypes = nil
	file_ApiKeyService_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// ApiKeyServiceClient is the client API for ApiKeyService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ApiKeyServiceClient interface {
	IssueApiKey(ctx context.Context, in *IssueApiKeyRequest, opts ...grpc.CallOption) (*IssueApiKeyResponse, error)
	ValidateApiKey(ctx context.Context, in *ValidateApiKeyRequest, opts ...grpc.CallOption) (*ValidateApiKeyResponse, error)
	GetAllKeys(ctx context.Context, in *GetAllKeysRequest, opts ...grpc.CallOption) (*GetAllKeysResponse, error)
	GetKeyById(ctx context.Context, in *GetKeyByIdRequest, opts ...grpc.CallOption) (*GetKeyByIdResponse, error)
	SetExpired(ctx context.Context, in *SetExpiredRequest, opts ...grpc.CallOption) (*SetExpiredResponse, error)
	GetKeyUsageById(ctx context.Context, in *GetKeyUsageByIdRequest, opts ...grpc.CallOption) (*GetKeyUsageByIdResponse, error)
	GetKeyUsageByPath(ctx context.Context, in *GetKeyUsageByPathRequest, opts ...grpc.CallOption) (*GetKeyUsageByPathResponse, error)
}

type apiKeyServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewApiKeyServiceClient(cc grpc.ClientConnInterface) ApiKeyServiceClient {
	return &apiKeyServiceClient{cc}
}

func (c *apiKeyServiceClient) IssueApiKey(ctx context.Context, in *IssueApiKeyRequest, opts ...grpc.CallOption) (*IssueApiKeyResponse, error) {
	out := new(IssueApiKeyResponse)
	err := c.cc.Invoke(ctx, "/IrisAPIsGRPC.ApiKeyService/IssueApiKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiKeyServiceClient) ValidateApiKey(ctx context.Context, in *ValidateApiKeyRequest, opts ...grpc.CallOption) (*ValidateApiKeyResponse, error) {
	out := new(ValidateApiKeyResponse)
	err := c.cc.Invoke(ctx, "/IrisAPIsGRPC.ApiKeyService/ValidateApiKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiKeyServiceClient) GetAllKeys(ctx context.Context, in *GetAllKeysRequest, opts ...grpc.CallOption) (*GetAllKeysResponse, error) {
	out := new(GetAllKeysResponse)
	err := c.cc.Invoke(ctx, "/IrisAPIsGRPC.ApiKeyService/GetAllKeys", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiKeyServiceClient) GetKeyById(ctx context.Context, in *GetKeyByIdRequest, opts ...grpc.CallOption) (*GetKeyByIdResponse, error) {
	out := new(GetKeyByIdResponse)
	err := c.cc.Invoke(ctx, "/IrisAPIsGRPC.ApiKeyService/GetKeyById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiKeyServiceClient) SetExpired(ctx context.Context, in *SetExpiredRequest, opts ...grpc.CallOption) (*SetExpiredResponse, error) {
	out := new(SetExpiredResponse)
	err := c.cc.Invoke(ctx, "/IrisAPIsGRPC.ApiKeyService/SetExpired", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiKeyServiceClient) GetKeyUsageById(ctx context.Context, in *GetKeyUsageByIdRequest, opts ...grpc.CallOption) (*GetKeyUsageByIdResponse, error) {
	out := new(GetKeyUsageByIdResponse)
	err := c.cc.Invoke(ctx, "/IrisAPIsGRPC.ApiKeyService/GetKeyUsageById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiKeyServiceClient) GetKeyUsageByPath(ctx context.Context, in *GetKeyUsageByPathRequest, opts ...grpc.CallOption) (*GetKeyUsageByPathResponse, error) {
	out := new(GetKeyUsageByPathResponse)
	err := c.cc.Invoke(ctx, "/IrisAPIsGRPC.ApiKeyService/GetKeyUsageByPath", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ApiKeyServiceServer is the server API for ApiKeyService service.
type ApiKeyServiceServer interface {
	IssueApiKey(context.Context, *IssueApiKeyRequest) (*IssueApiKeyResponse, error)
	ValidateApiKey(context.Context, *ValidateApiKeyRequest) (*ValidateApiKeyResponse, error)
	GetAllKeys(context.Context, *GetAllKeysRequest) (*GetAllKeysResponse, error)
	GetKeyById(context.Context, *GetKeyByIdRequest) (*GetKeyByIdResponse, error)
	SetExpired(context.Context, *SetExpiredRequest) (*SetExpiredResponse, error)
	GetKeyUsageById(context.Context, *GetKeyUsageByIdRequest) (*GetKeyUsageByIdResponse, error)
	GetKeyUsageByPath(context.Context, *GetKeyUsageByPathRequest) (*GetKeyUsageByPathResponse, error)
}

// UnimplementedApiKeyServiceServer can be embedded to have forward compatible implementations.
type UnimplementedApiKeyServiceServer struct {
}

func (*UnimplementedApiKeyServiceServer) IssueApiKey(context.Context, *IssueApiKeyRequest) (*IssueApiKeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IssueApiKey not implemented")
}
func (*UnimplementedApiKeyServiceServer) ValidateApiKey(context.Context, *ValidateApiKeyRequest) (*ValidateApiKeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidateApiKey not implemented")
}
func (*UnimplementedApiKeyServiceServer) GetAllKeys(context.Context, *GetAllKeysRequest) (*GetAllKeysResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllKeys not implemented")
}
func (*UnimplementedApiKeyServiceServer) GetKeyById(context.Context, *GetKeyByIdRequest) (*GetKeyByIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetKeyById not implemented")
}
func (*UnimplementedApiKeyServiceServer) SetExpired(context.Context, *SetExpiredRequest) (*SetExpiredResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetExpired not implemented")
}
func (*UnimplementedApiKeyServiceServer) GetKeyUsageById(context.Context, *GetKeyUsageByIdRequest) (*GetKeyUsageByIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetKeyUsageById not implemented")
}
func (*UnimplementedApiKeyServiceServer) GetKeyUsageByPath(context.Context, *GetKeyUsageByPathRequest) (*GetKeyUsageByPathResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetKeyUsageByPath not implemented")
}

func RegisterApiKeyServiceServer(s *grpc.Server, srv ApiKeyServiceServer) {
	s.RegisterService(&_ApiKeyService_serviceDesc, srv)
}

func _ApiKeyService_IssueApiKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IssueApiKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiKeyServiceServer).IssueApiKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/IrisAPIsGRPC.ApiKeyService/IssueApiKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiKeyServiceServer).IssueApiKey(ctx, req.(*IssueApiKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiKeyService_ValidateApiKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ValidateApiKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiKeyServiceServer).ValidateApiKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/IrisAPIsGRPC.ApiKeyService/ValidateApiKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiKeyServiceServer).ValidateApiKey(ctx, req.(*ValidateApiKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiKeyService_GetAllKeys_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllKeysRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiKeyServiceServer).GetAllKeys(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/IrisAPIsGRPC.ApiKeyService/GetAllKeys",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiKeyServiceServer).GetAllKeys(ctx, req.(*GetAllKeysRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiKeyService_GetKeyById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetKeyByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiKeyServiceServer).GetKeyById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/IrisAPIsGRPC.ApiKeyService/GetKeyById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiKeyServiceServer).GetKeyById(ctx, req.(*GetKeyByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiKeyService_SetExpired_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetExpiredRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiKeyServiceServer).SetExpired(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/IrisAPIsGRPC.ApiKeyService/SetExpired",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiKeyServiceServer).SetExpired(ctx, req.(*SetExpiredRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiKeyService_GetKeyUsageById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetKeyUsageByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiKeyServiceServer).GetKeyUsageById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/IrisAPIsGRPC.ApiKeyService/GetKeyUsageById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiKeyServiceServer).GetKeyUsageById(ctx, req.(*GetKeyUsageByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiKeyService_GetKeyUsageByPath_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetKeyUsageByPathRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiKeyServiceServer).GetKeyUsageByPath(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/IrisAPIsGRPC.ApiKeyService/GetKeyUsageByPath",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiKeyServiceServer).GetKeyUsageByPath(ctx, req.(*GetKeyUsageByPathRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ApiKeyService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "IrisAPIsGRPC.ApiKeyService",
	HandlerType: (*ApiKeyServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "IssueApiKey",
			Handler:    _ApiKeyService_IssueApiKey_Handler,
		},
		{
			MethodName: "ValidateApiKey",
			Handler:    _ApiKeyService_ValidateApiKey_Handler,
		},
		{
			MethodName: "GetAllKeys",
			Handler:    _ApiKeyService_GetAllKeys_Handler,
		},
		{
			MethodName: "GetKeyById",
			Handler:    _ApiKeyService_GetKeyById_Handler,
		},
		{
			MethodName: "SetExpired",
			Handler:    _ApiKeyService_SetExpired_Handler,
		},
		{
			MethodName: "GetKeyUsageById",
			Handler:    _ApiKeyService_GetKeyUsageById_Handler,
		},
		{
			MethodName: "GetKeyUsageByPath",
			Handler:    _ApiKeyService_GetKeyUsageByPath_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ApiKeyService.proto",
}
